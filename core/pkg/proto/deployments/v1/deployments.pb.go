// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.4
// source: nitric/proto/deployments/v1/deployments.proto

package deploymentspb

import (
	v11 "github.com/nitrictech/nitric/core/pkg/proto/batch/v1"
	v1 "github.com/nitrictech/nitric/core/pkg/proto/resources/v1"
	v12 "github.com/nitrictech/nitric/core/pkg/proto/storage/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	structpb "google.golang.org/protobuf/types/known/structpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ResourceDeploymentAction int32

const (
	// A new resource is being created
	ResourceDeploymentAction_CREATE ResourceDeploymentAction = 0
	// An existing resource is being updated
	ResourceDeploymentAction_UPDATE ResourceDeploymentAction = 1
	// An existing resource is being replaced
	ResourceDeploymentAction_REPLACE ResourceDeploymentAction = 2
	// No-op on the resource (it already exists and requires no changes)
	ResourceDeploymentAction_SAME ResourceDeploymentAction = 3
	// An existing resource is being deleted
	ResourceDeploymentAction_DELETE ResourceDeploymentAction = 4
)

// Enum value maps for ResourceDeploymentAction.
var (
	ResourceDeploymentAction_name = map[int32]string{
		0: "CREATE",
		1: "UPDATE",
		2: "REPLACE",
		3: "SAME",
		4: "DELETE",
	}
	ResourceDeploymentAction_value = map[string]int32{
		"CREATE":  0,
		"UPDATE":  1,
		"REPLACE": 2,
		"SAME":    3,
		"DELETE":  4,
	}
)

func (x ResourceDeploymentAction) Enum() *ResourceDeploymentAction {
	p := new(ResourceDeploymentAction)
	*p = x
	return p
}

func (x ResourceDeploymentAction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ResourceDeploymentAction) Descriptor() protoreflect.EnumDescriptor {
	return file_nitric_proto_deployments_v1_deployments_proto_enumTypes[0].Descriptor()
}

func (ResourceDeploymentAction) Type() protoreflect.EnumType {
	return &file_nitric_proto_deployments_v1_deployments_proto_enumTypes[0]
}

func (x ResourceDeploymentAction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ResourceDeploymentAction.Descriptor instead.
func (ResourceDeploymentAction) EnumDescriptor() ([]byte, []int) {
	return file_nitric_proto_deployments_v1_deployments_proto_rawDescGZIP(), []int{0}
}

type ResourceDeploymentStatus int32

const (
	// The action hasn't started, usually due to a dependency
	ResourceDeploymentStatus_PENDING ResourceDeploymentStatus = 0
	// The action in currently in-flight, e.g. waiting for cloud provider to provision a resource
	ResourceDeploymentStatus_IN_PROGRESS ResourceDeploymentStatus = 1
	// The action has been applied successfully
	ResourceDeploymentStatus_SUCCESS ResourceDeploymentStatus = 2
	// The action has failed to be (completely) applied
	ResourceDeploymentStatus_FAILED ResourceDeploymentStatus = 3
)

// Enum value maps for ResourceDeploymentStatus.
var (
	ResourceDeploymentStatus_name = map[int32]string{
		0: "PENDING",
		1: "IN_PROGRESS",
		2: "SUCCESS",
		3: "FAILED",
	}
	ResourceDeploymentStatus_value = map[string]int32{
		"PENDING":     0,
		"IN_PROGRESS": 1,
		"SUCCESS":     2,
		"FAILED":      3,
	}
)

func (x ResourceDeploymentStatus) Enum() *ResourceDeploymentStatus {
	p := new(ResourceDeploymentStatus)
	*p = x
	return p
}

func (x ResourceDeploymentStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ResourceDeploymentStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_nitric_proto_deployments_v1_deployments_proto_enumTypes[1].Descriptor()
}

func (ResourceDeploymentStatus) Type() protoreflect.EnumType {
	return &file_nitric_proto_deployments_v1_deployments_proto_enumTypes[1]
}

func (x ResourceDeploymentStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ResourceDeploymentStatus.Descriptor instead.
func (ResourceDeploymentStatus) EnumDescriptor() ([]byte, []int) {
	return file_nitric_proto_deployments_v1_deployments_proto_rawDescGZIP(), []int{1}
}

type DeploymentUpRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The spec to deploy
	Spec *Spec `protobuf:"bytes,1,opt,name=spec,proto3" json:"spec,omitempty"`
	// A map of attributes related to the deploy request
	// this allows for adding project identifiers etc.
	Attributes *structpb.Struct `protobuf:"bytes,2,opt,name=attributes,proto3" json:"attributes,omitempty"`
	// A hint to the provider of the kind of output that the client can accept
	// This will allow provider developers to provider richer output back to clients.
	Interactive bool `protobuf:"varint,3,opt,name=interactive,proto3" json:"interactive,omitempty"`
}

func (x *DeploymentUpRequest) Reset() {
	*x = DeploymentUpRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nitric_proto_deployments_v1_deployments_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeploymentUpRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeploymentUpRequest) ProtoMessage() {}

func (x *DeploymentUpRequest) ProtoReflect() protoreflect.Message {
	mi := &file_nitric_proto_deployments_v1_deployments_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeploymentUpRequest.ProtoReflect.Descriptor instead.
func (*DeploymentUpRequest) Descriptor() ([]byte, []int) {
	return file_nitric_proto_deployments_v1_deployments_proto_rawDescGZIP(), []int{0}
}

func (x *DeploymentUpRequest) GetSpec() *Spec {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *DeploymentUpRequest) GetAttributes() *structpb.Struct {
	if x != nil {
		return x.Attributes
	}
	return nil
}

func (x *DeploymentUpRequest) GetInteractive() bool {
	if x != nil {
		return x.Interactive
	}
	return false
}

type DeploymentUpEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Content:
	//
	//	*DeploymentUpEvent_Message
	//	*DeploymentUpEvent_Update
	//	*DeploymentUpEvent_Result
	Content isDeploymentUpEvent_Content `protobuf_oneof:"content"`
}

func (x *DeploymentUpEvent) Reset() {
	*x = DeploymentUpEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nitric_proto_deployments_v1_deployments_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeploymentUpEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeploymentUpEvent) ProtoMessage() {}

func (x *DeploymentUpEvent) ProtoReflect() protoreflect.Message {
	mi := &file_nitric_proto_deployments_v1_deployments_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeploymentUpEvent.ProtoReflect.Descriptor instead.
func (*DeploymentUpEvent) Descriptor() ([]byte, []int) {
	return file_nitric_proto_deployments_v1_deployments_proto_rawDescGZIP(), []int{1}
}

func (m *DeploymentUpEvent) GetContent() isDeploymentUpEvent_Content {
	if m != nil {
		return m.Content
	}
	return nil
}

func (x *DeploymentUpEvent) GetMessage() string {
	if x, ok := x.GetContent().(*DeploymentUpEvent_Message); ok {
		return x.Message
	}
	return ""
}

func (x *DeploymentUpEvent) GetUpdate() *ResourceUpdate {
	if x, ok := x.GetContent().(*DeploymentUpEvent_Update); ok {
		return x.Update
	}
	return nil
}

func (x *DeploymentUpEvent) GetResult() *UpResult {
	if x, ok := x.GetContent().(*DeploymentUpEvent_Result); ok {
		return x.Result
	}
	return nil
}

type isDeploymentUpEvent_Content interface {
	isDeploymentUpEvent_Content()
}

type DeploymentUpEvent_Message struct {
	Message string `protobuf:"bytes,1,opt,name=message,proto3,oneof"`
}

type DeploymentUpEvent_Update struct {
	Update *ResourceUpdate `protobuf:"bytes,2,opt,name=update,proto3,oneof"`
}

type DeploymentUpEvent_Result struct {
	Result *UpResult `protobuf:"bytes,3,opt,name=result,proto3,oneof"`
}

func (*DeploymentUpEvent_Message) isDeploymentUpEvent_Content() {}

func (*DeploymentUpEvent_Update) isDeploymentUpEvent_Content() {}

func (*DeploymentUpEvent_Result) isDeploymentUpEvent_Content() {}

type ResourceUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The resource being updated, if this is nil the update applies to the stack
	Id *v1.ResourceIdentifier `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The type of update being applied
	Action ResourceDeploymentAction `protobuf:"varint,3,opt,name=action,proto3,enum=nitric.proto.deployments.v1.ResourceDeploymentAction" json:"action,omitempty"`
	// The current status of the action being applied
	Status ResourceDeploymentStatus `protobuf:"varint,4,opt,name=status,proto3,enum=nitric.proto.deployments.v1.ResourceDeploymentStatus" json:"status,omitempty"`
	// (optional) A globally unique identifier (scoped to the id above), used when Nitric Resources map 1:many in a cloud provider.
	// e.g. the container image repository for a service deployment.
	// This can also be set when id is nil above and it will imply a non-nitric resource that is necessary to deploy for a stack to operate
	// e.g. an Azure StorageAccount
	SubResource string `protobuf:"bytes,5,opt,name=sub_resource,json=subResource,proto3" json:"sub_resource,omitempty"`
	// Additional information about the update
	Message string `protobuf:"bytes,6,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *ResourceUpdate) Reset() {
	*x = ResourceUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nitric_proto_deployments_v1_deployments_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResourceUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceUpdate) ProtoMessage() {}

func (x *ResourceUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_nitric_proto_deployments_v1_deployments_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceUpdate.ProtoReflect.Descriptor instead.
func (*ResourceUpdate) Descriptor() ([]byte, []int) {
	return file_nitric_proto_deployments_v1_deployments_proto_rawDescGZIP(), []int{2}
}

func (x *ResourceUpdate) GetId() *v1.ResourceIdentifier {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ResourceUpdate) GetAction() ResourceDeploymentAction {
	if x != nil {
		return x.Action
	}
	return ResourceDeploymentAction_CREATE
}

func (x *ResourceUpdate) GetStatus() ResourceDeploymentStatus {
	if x != nil {
		return x.Status
	}
	return ResourceDeploymentStatus_PENDING
}

func (x *ResourceUpdate) GetSubResource() string {
	if x != nil {
		return x.SubResource
	}
	return ""
}

func (x *ResourceUpdate) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// Terminal message indicating deployment success
type UpResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Indicate the success status
	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	// Types that are assignable to Content:
	//
	//	*UpResult_Text
	Content isUpResult_Content `protobuf_oneof:"content"`
}

func (x *UpResult) Reset() {
	*x = UpResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nitric_proto_deployments_v1_deployments_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpResult) ProtoMessage() {}

func (x *UpResult) ProtoReflect() protoreflect.Message {
	mi := &file_nitric_proto_deployments_v1_deployments_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpResult.ProtoReflect.Descriptor instead.
func (*UpResult) Descriptor() ([]byte, []int) {
	return file_nitric_proto_deployments_v1_deployments_proto_rawDescGZIP(), []int{3}
}

func (x *UpResult) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (m *UpResult) GetContent() isUpResult_Content {
	if m != nil {
		return m.Content
	}
	return nil
}

func (x *UpResult) GetText() string {
	if x, ok := x.GetContent().(*UpResult_Text); ok {
		return x.Text
	}
	return ""
}

type isUpResult_Content interface {
	isUpResult_Content()
}

type UpResult_Text struct {
	// Simple text output as result
	Text string `protobuf:"bytes,2,opt,name=text,proto3,oneof"`
}

func (*UpResult_Text) isUpResult_Content() {}

type DeploymentDownRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A map of attributes related to the deploy request
	// this allows for adding project identifiers etc.
	Attributes *structpb.Struct `protobuf:"bytes,1,opt,name=attributes,proto3" json:"attributes,omitempty"`
	// A hint to the provider of the kind of output that the client can accept
	// This will allow provider developers to provider richer output back to clients.
	Interactive bool `protobuf:"varint,2,opt,name=interactive,proto3" json:"interactive,omitempty"`
}

func (x *DeploymentDownRequest) Reset() {
	*x = DeploymentDownRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nitric_proto_deployments_v1_deployments_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeploymentDownRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeploymentDownRequest) ProtoMessage() {}

func (x *DeploymentDownRequest) ProtoReflect() protoreflect.Message {
	mi := &file_nitric_proto_deployments_v1_deployments_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeploymentDownRequest.ProtoReflect.Descriptor instead.
func (*DeploymentDownRequest) Descriptor() ([]byte, []int) {
	return file_nitric_proto_deployments_v1_deployments_proto_rawDescGZIP(), []int{4}
}

func (x *DeploymentDownRequest) GetAttributes() *structpb.Struct {
	if x != nil {
		return x.Attributes
	}
	return nil
}

func (x *DeploymentDownRequest) GetInteractive() bool {
	if x != nil {
		return x.Interactive
	}
	return false
}

type DeploymentDownEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Content:
	//
	//	*DeploymentDownEvent_Message
	//	*DeploymentDownEvent_Result
	//	*DeploymentDownEvent_Update
	Content isDeploymentDownEvent_Content `protobuf_oneof:"content"`
}

func (x *DeploymentDownEvent) Reset() {
	*x = DeploymentDownEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nitric_proto_deployments_v1_deployments_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeploymentDownEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeploymentDownEvent) ProtoMessage() {}

func (x *DeploymentDownEvent) ProtoReflect() protoreflect.Message {
	mi := &file_nitric_proto_deployments_v1_deployments_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeploymentDownEvent.ProtoReflect.Descriptor instead.
func (*DeploymentDownEvent) Descriptor() ([]byte, []int) {
	return file_nitric_proto_deployments_v1_deployments_proto_rawDescGZIP(), []int{5}
}

func (m *DeploymentDownEvent) GetContent() isDeploymentDownEvent_Content {
	if m != nil {
		return m.Content
	}
	return nil
}

func (x *DeploymentDownEvent) GetMessage() string {
	if x, ok := x.GetContent().(*DeploymentDownEvent_Message); ok {
		return x.Message
	}
	return ""
}

func (x *DeploymentDownEvent) GetResult() *DownResult {
	if x, ok := x.GetContent().(*DeploymentDownEvent_Result); ok {
		return x.Result
	}
	return nil
}

func (x *DeploymentDownEvent) GetUpdate() *ResourceUpdate {
	if x, ok := x.GetContent().(*DeploymentDownEvent_Update); ok {
		return x.Update
	}
	return nil
}

type isDeploymentDownEvent_Content interface {
	isDeploymentDownEvent_Content()
}

type DeploymentDownEvent_Message struct {
	Message string `protobuf:"bytes,1,opt,name=message,proto3,oneof"`
}

type DeploymentDownEvent_Result struct {
	Result *DownResult `protobuf:"bytes,2,opt,name=result,proto3,oneof"`
}

type DeploymentDownEvent_Update struct {
	Update *ResourceUpdate `protobuf:"bytes,3,opt,name=update,proto3,oneof"`
}

func (*DeploymentDownEvent_Message) isDeploymentDownEvent_Content() {}

func (*DeploymentDownEvent_Result) isDeploymentDownEvent_Content() {}

func (*DeploymentDownEvent_Update) isDeploymentDownEvent_Content() {}

// Terminal message indicating deployment success
type DownResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DownResult) Reset() {
	*x = DownResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nitric_proto_deployments_v1_deployments_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DownResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DownResult) ProtoMessage() {}

func (x *DownResult) ProtoReflect() protoreflect.Message {
	mi := &file_nitric_proto_deployments_v1_deployments_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DownResult.ProtoReflect.Descriptor instead.
func (*DownResult) Descriptor() ([]byte, []int) {
	return file_nitric_proto_deployments_v1_deployments_proto_rawDescGZIP(), []int{6}
}

// An image source to be used for service deployment
type ImageSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// URI of the docker image
	// To support remote images this may also need to provide auth information
	Uri string `protobuf:"bytes,1,opt,name=uri,proto3" json:"uri,omitempty"`
}

func (x *ImageSource) Reset() {
	*x = ImageSource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nitric_proto_deployments_v1_deployments_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImageSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImageSource) ProtoMessage() {}

func (x *ImageSource) ProtoReflect() protoreflect.Message {
	mi := &file_nitric_proto_deployments_v1_deployments_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImageSource.ProtoReflect.Descriptor instead.
func (*ImageSource) Descriptor() ([]byte, []int) {
	return file_nitric_proto_deployments_v1_deployments_proto_rawDescGZIP(), []int{7}
}

func (x *ImageSource) GetUri() string {
	if x != nil {
		return x.Uri
	}
	return ""
}

// A unit of compute (i.e. function/container)
type Service struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Source of the service
	//
	// Types that are assignable to Source:
	//
	//	*Service_Image
	Source isService_Source `protobuf_oneof:"source"`
	// Expected worker count for this service
	Workers int32 `protobuf:"varint,10,opt,name=workers,proto3" json:"workers,omitempty"`
	// Configurable timeout for request handling
	//
	// Deprecated: Do not use.
	Timeout int32 `protobuf:"varint,11,opt,name=timeout,proto3" json:"timeout,omitempty"`
	// Configurable memory size for this instance
	//
	// Deprecated: Do not use.
	Memory int32 `protobuf:"varint,12,opt,name=memory,proto3" json:"memory,omitempty"`
	// A simple type property
	// describes the requested type of service that this should be
	// for this project, a provider can implement how this request is satisfied
	// in any way
	Type string `protobuf:"bytes,13,opt,name=type,proto3" json:"type,omitempty"`
	// Environment variables for this service
	Env map[string]string `protobuf:"bytes,14,rep,name=env,proto3" json:"env,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Service) Reset() {
	*x = Service{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nitric_proto_deployments_v1_deployments_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Service) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Service) ProtoMessage() {}

func (x *Service) ProtoReflect() protoreflect.Message {
	mi := &file_nitric_proto_deployments_v1_deployments_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Service.ProtoReflect.Descriptor instead.
func (*Service) Descriptor() ([]byte, []int) {
	return file_nitric_proto_deployments_v1_deployments_proto_rawDescGZIP(), []int{8}
}

func (m *Service) GetSource() isService_Source {
	if m != nil {
		return m.Source
	}
	return nil
}

func (x *Service) GetImage() *ImageSource {
	if x, ok := x.GetSource().(*Service_Image); ok {
		return x.Image
	}
	return nil
}

func (x *Service) GetWorkers() int32 {
	if x != nil {
		return x.Workers
	}
	return 0
}

// Deprecated: Do not use.
func (x *Service) GetTimeout() int32 {
	if x != nil {
		return x.Timeout
	}
	return 0
}

// Deprecated: Do not use.
func (x *Service) GetMemory() int32 {
	if x != nil {
		return x.Memory
	}
	return 0
}

func (x *Service) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Service) GetEnv() map[string]string {
	if x != nil {
		return x.Env
	}
	return nil
}

type isService_Source interface {
	isService_Source()
}

type Service_Image struct {
	// Container image as a service
	Image *ImageSource `protobuf:"bytes,1,opt,name=image,proto3,oneof"`
}

func (*Service_Image) isService_Source() {}

type Job struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the job to create
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The default resource requirements of the job
	Requirements *v11.JobResourceRequirements `protobuf:"bytes,2,opt,name=requirements,proto3" json:"requirements,omitempty"`
}

func (x *Job) Reset() {
	*x = Job{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nitric_proto_deployments_v1_deployments_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Job) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Job) ProtoMessage() {}

func (x *Job) ProtoReflect() protoreflect.Message {
	mi := &file_nitric_proto_deployments_v1_deployments_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Job.ProtoReflect.Descriptor instead.
func (*Job) Descriptor() ([]byte, []int) {
	return file_nitric_proto_deployments_v1_deployments_proto_rawDescGZIP(), []int{9}
}

func (x *Job) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Job) GetRequirements() *v11.JobResourceRequirements {
	if x != nil {
		return x.Requirements
	}
	return nil
}

type Batch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Source of the service
	//
	// Types that are assignable to Source:
	//
	//	*Batch_Image
	Source isBatch_Source `protobuf_oneof:"source"`
	// A simple type property
	// describes the requested type of batch that this should be
	// for this project, a provider can implement how this request is satisfied
	// in any way
	Type string `protobuf:"bytes,10,opt,name=type,proto3" json:"type,omitempty"`
	// Environment variables for this Batch
	Env map[string]string `protobuf:"bytes,11,rep,name=env,proto3" json:"env,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Jobs that are defined in this Batch
	Jobs []*Job `protobuf:"bytes,12,rep,name=jobs,proto3" json:"jobs,omitempty"`
}

func (x *Batch) Reset() {
	*x = Batch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nitric_proto_deployments_v1_deployments_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Batch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Batch) ProtoMessage() {}

func (x *Batch) ProtoReflect() protoreflect.Message {
	mi := &file_nitric_proto_deployments_v1_deployments_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Batch.ProtoReflect.Descriptor instead.
func (*Batch) Descriptor() ([]byte, []int) {
	return file_nitric_proto_deployments_v1_deployments_proto_rawDescGZIP(), []int{10}
}

func (m *Batch) GetSource() isBatch_Source {
	if m != nil {
		return m.Source
	}
	return nil
}

func (x *Batch) GetImage() *ImageSource {
	if x, ok := x.GetSource().(*Batch_Image); ok {
		return x.Image
	}
	return nil
}

func (x *Batch) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Batch) GetEnv() map[string]string {
	if x != nil {
		return x.Env
	}
	return nil
}

func (x *Batch) GetJobs() []*Job {
	if x != nil {
		return x.Jobs
	}
	return nil
}

type isBatch_Source interface {
	isBatch_Source()
}

type Batch_Image struct {
	// Image URI for this batch service
	Image *ImageSource `protobuf:"bytes,1,opt,name=image,proto3,oneof"`
}

func (*Batch_Image) isBatch_Source() {}

type Bucket struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Listeners []*BucketListener `protobuf:"bytes,1,rep,name=listeners,proto3" json:"listeners,omitempty"`
}

func (x *Bucket) Reset() {
	*x = Bucket{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nitric_proto_deployments_v1_deployments_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bucket) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bucket) ProtoMessage() {}

func (x *Bucket) ProtoReflect() protoreflect.Message {
	mi := &file_nitric_proto_deployments_v1_deployments_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bucket.ProtoReflect.Descriptor instead.
func (*Bucket) Descriptor() ([]byte, []int) {
	return file_nitric_proto_deployments_v1_deployments_proto_rawDescGZIP(), []int{11}
}

func (x *Bucket) GetListeners() []*BucketListener {
	if x != nil {
		return x.Listeners
	}
	return nil
}

type BucketListener struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *v12.RegistrationRequest `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"`
	// Types that are assignable to Target:
	//
	//	*BucketListener_Service
	Target isBucketListener_Target `protobuf_oneof:"target"`
}

func (x *BucketListener) Reset() {
	*x = BucketListener{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nitric_proto_deployments_v1_deployments_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BucketListener) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BucketListener) ProtoMessage() {}

func (x *BucketListener) ProtoReflect() protoreflect.Message {
	mi := &file_nitric_proto_deployments_v1_deployments_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BucketListener.ProtoReflect.Descriptor instead.
func (*BucketListener) Descriptor() ([]byte, []int) {
	return file_nitric_proto_deployments_v1_deployments_proto_rawDescGZIP(), []int{12}
}

func (x *BucketListener) GetConfig() *v12.RegistrationRequest {
	if x != nil {
		return x.Config
	}
	return nil
}

func (m *BucketListener) GetTarget() isBucketListener_Target {
	if m != nil {
		return m.Target
	}
	return nil
}

func (x *BucketListener) GetService() string {
	if x, ok := x.GetTarget().(*BucketListener_Service); ok {
		return x.Service
	}
	return ""
}

type isBucketListener_Target interface {
	isBucketListener_Target()
}

type BucketListener_Service struct {
	// The name of an service to target
	Service string `protobuf:"bytes,2,opt,name=service,proto3,oneof"`
}

func (*BucketListener_Service) isBucketListener_Target() {}

type Topic struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Subscriptions []*SubscriptionTarget `protobuf:"bytes,1,rep,name=subscriptions,proto3" json:"subscriptions,omitempty"`
}

func (x *Topic) Reset() {
	*x = Topic{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nitric_proto_deployments_v1_deployments_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Topic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Topic) ProtoMessage() {}

func (x *Topic) ProtoReflect() protoreflect.Message {
	mi := &file_nitric_proto_deployments_v1_deployments_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Topic.ProtoReflect.Descriptor instead.
func (*Topic) Descriptor() ([]byte, []int) {
	return file_nitric_proto_deployments_v1_deployments_proto_rawDescGZIP(), []int{13}
}

func (x *Topic) GetSubscriptions() []*SubscriptionTarget {
	if x != nil {
		return x.Subscriptions
	}
	return nil
}

type Queue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Queue) Reset() {
	*x = Queue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nitric_proto_deployments_v1_deployments_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Queue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Queue) ProtoMessage() {}

func (x *Queue) ProtoReflect() protoreflect.Message {
	mi := &file_nitric_proto_deployments_v1_deployments_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Queue.ProtoReflect.Descriptor instead.
func (*Queue) Descriptor() ([]byte, []int) {
	return file_nitric_proto_deployments_v1_deployments_proto_rawDescGZIP(), []int{14}
}

type KeyValueStore struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *KeyValueStore) Reset() {
	*x = KeyValueStore{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nitric_proto_deployments_v1_deployments_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeyValueStore) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyValueStore) ProtoMessage() {}

func (x *KeyValueStore) ProtoReflect() protoreflect.Message {
	mi := &file_nitric_proto_deployments_v1_deployments_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyValueStore.ProtoReflect.Descriptor instead.
func (*KeyValueStore) Descriptor() ([]byte, []int) {
	return file_nitric_proto_deployments_v1_deployments_proto_rawDescGZIP(), []int{15}
}

type Secret struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Secret) Reset() {
	*x = Secret{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nitric_proto_deployments_v1_deployments_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Secret) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Secret) ProtoMessage() {}

func (x *Secret) ProtoReflect() protoreflect.Message {
	mi := &file_nitric_proto_deployments_v1_deployments_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Secret.ProtoReflect.Descriptor instead.
func (*Secret) Descriptor() ([]byte, []int) {
	return file_nitric_proto_deployments_v1_deployments_proto_rawDescGZIP(), []int{16}
}

type SubscriptionTarget struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Target:
	//
	//	*SubscriptionTarget_Service
	Target isSubscriptionTarget_Target `protobuf_oneof:"target"`
}

func (x *SubscriptionTarget) Reset() {
	*x = SubscriptionTarget{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nitric_proto_deployments_v1_deployments_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscriptionTarget) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscriptionTarget) ProtoMessage() {}

func (x *SubscriptionTarget) ProtoReflect() protoreflect.Message {
	mi := &file_nitric_proto_deployments_v1_deployments_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscriptionTarget.ProtoReflect.Descriptor instead.
func (*SubscriptionTarget) Descriptor() ([]byte, []int) {
	return file_nitric_proto_deployments_v1_deployments_proto_rawDescGZIP(), []int{17}
}

func (m *SubscriptionTarget) GetTarget() isSubscriptionTarget_Target {
	if m != nil {
		return m.Target
	}
	return nil
}

func (x *SubscriptionTarget) GetService() string {
	if x, ok := x.GetTarget().(*SubscriptionTarget_Service); ok {
		return x.Service
	}
	return ""
}

type isSubscriptionTarget_Target interface {
	isSubscriptionTarget_Target()
}

type SubscriptionTarget_Service struct {
	// The name of an service to target
	Service string `protobuf:"bytes,1,opt,name=service,proto3,oneof"`
}

func (*SubscriptionTarget_Service) isSubscriptionTarget_Target() {}

type TopicSubscription struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Target *SubscriptionTarget `protobuf:"bytes,1,opt,name=target,proto3" json:"target,omitempty"`
}

func (x *TopicSubscription) Reset() {
	*x = TopicSubscription{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nitric_proto_deployments_v1_deployments_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TopicSubscription) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TopicSubscription) ProtoMessage() {}

func (x *TopicSubscription) ProtoReflect() protoreflect.Message {
	mi := &file_nitric_proto_deployments_v1_deployments_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TopicSubscription.ProtoReflect.Descriptor instead.
func (*TopicSubscription) Descriptor() ([]byte, []int) {
	return file_nitric_proto_deployments_v1_deployments_proto_rawDescGZIP(), []int{18}
}

func (x *TopicSubscription) GetTarget() *SubscriptionTarget {
	if x != nil {
		return x.Target
	}
	return nil
}

type HttpTarget struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Target:
	//
	//	*HttpTarget_Service
	Target isHttpTarget_Target `protobuf_oneof:"target"`
}

func (x *HttpTarget) Reset() {
	*x = HttpTarget{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nitric_proto_deployments_v1_deployments_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HttpTarget) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HttpTarget) ProtoMessage() {}

func (x *HttpTarget) ProtoReflect() protoreflect.Message {
	mi := &file_nitric_proto_deployments_v1_deployments_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HttpTarget.ProtoReflect.Descriptor instead.
func (*HttpTarget) Descriptor() ([]byte, []int) {
	return file_nitric_proto_deployments_v1_deployments_proto_rawDescGZIP(), []int{19}
}

func (m *HttpTarget) GetTarget() isHttpTarget_Target {
	if m != nil {
		return m.Target
	}
	return nil
}

func (x *HttpTarget) GetService() string {
	if x, ok := x.GetTarget().(*HttpTarget_Service); ok {
		return x.Service
	}
	return ""
}

type isHttpTarget_Target interface {
	isHttpTarget_Target()
}

type HttpTarget_Service struct {
	// The name of an service to target
	Service string `protobuf:"bytes,1,opt,name=service,proto3,oneof"`
}

func (*HttpTarget_Service) isHttpTarget_Target() {}

// An http proxy resource
type Http struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Target *HttpTarget `protobuf:"bytes,1,opt,name=target,proto3" json:"target,omitempty"`
}

func (x *Http) Reset() {
	*x = Http{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nitric_proto_deployments_v1_deployments_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Http) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Http) ProtoMessage() {}

func (x *Http) ProtoReflect() protoreflect.Message {
	mi := &file_nitric_proto_deployments_v1_deployments_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Http.ProtoReflect.Descriptor instead.
func (*Http) Descriptor() ([]byte, []int) {
	return file_nitric_proto_deployments_v1_deployments_proto_rawDescGZIP(), []int{20}
}

func (x *Http) GetTarget() *HttpTarget {
	if x != nil {
		return x.Target
	}
	return nil
}

type Api struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Document:
	//
	//	*Api_Openapi
	Document isApi_Document `protobuf_oneof:"document"`
}

func (x *Api) Reset() {
	*x = Api{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nitric_proto_deployments_v1_deployments_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Api) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Api) ProtoMessage() {}

func (x *Api) ProtoReflect() protoreflect.Message {
	mi := &file_nitric_proto_deployments_v1_deployments_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Api.ProtoReflect.Descriptor instead.
func (*Api) Descriptor() ([]byte, []int) {
	return file_nitric_proto_deployments_v1_deployments_proto_rawDescGZIP(), []int{21}
}

func (m *Api) GetDocument() isApi_Document {
	if m != nil {
		return m.Document
	}
	return nil
}

func (x *Api) GetOpenapi() string {
	if x, ok := x.GetDocument().(*Api_Openapi); ok {
		return x.Openapi
	}
	return ""
}

type isApi_Document interface {
	isApi_Document()
}

type Api_Openapi struct {
	// An OpenAPI document for deployment
	// This document will contain extensions that hint of services that should be targeted as part of the deployment
	Openapi string `protobuf:"bytes,1,opt,name=openapi,proto3,oneof"`
}

func (*Api_Openapi) isApi_Document() {}

// Declare a new websocket
type Websocket struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Target for handling new client connections
	ConnectTarget *WebsocketTarget `protobuf:"bytes,1,opt,name=connect_target,json=connectTarget,proto3" json:"connect_target,omitempty"`
	// Target for handling client disconnections
	DisconnectTarget *WebsocketTarget `protobuf:"bytes,2,opt,name=disconnect_target,json=disconnectTarget,proto3" json:"disconnect_target,omitempty"`
	// Target for handling all other message types
	MessageTarget *WebsocketTarget `protobuf:"bytes,3,opt,name=message_target,json=messageTarget,proto3" json:"message_target,omitempty"`
}

func (x *Websocket) Reset() {
	*x = Websocket{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nitric_proto_deployments_v1_deployments_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Websocket) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Websocket) ProtoMessage() {}

func (x *Websocket) ProtoReflect() protoreflect.Message {
	mi := &file_nitric_proto_deployments_v1_deployments_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Websocket.ProtoReflect.Descriptor instead.
func (*Websocket) Descriptor() ([]byte, []int) {
	return file_nitric_proto_deployments_v1_deployments_proto_rawDescGZIP(), []int{22}
}

func (x *Websocket) GetConnectTarget() *WebsocketTarget {
	if x != nil {
		return x.ConnectTarget
	}
	return nil
}

func (x *Websocket) GetDisconnectTarget() *WebsocketTarget {
	if x != nil {
		return x.DisconnectTarget
	}
	return nil
}

func (x *Websocket) GetMessageTarget() *WebsocketTarget {
	if x != nil {
		return x.MessageTarget
	}
	return nil
}

type WebsocketTarget struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Target:
	//
	//	*WebsocketTarget_Service
	Target isWebsocketTarget_Target `protobuf_oneof:"target"`
}

func (x *WebsocketTarget) Reset() {
	*x = WebsocketTarget{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nitric_proto_deployments_v1_deployments_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WebsocketTarget) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebsocketTarget) ProtoMessage() {}

func (x *WebsocketTarget) ProtoReflect() protoreflect.Message {
	mi := &file_nitric_proto_deployments_v1_deployments_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebsocketTarget.ProtoReflect.Descriptor instead.
func (*WebsocketTarget) Descriptor() ([]byte, []int) {
	return file_nitric_proto_deployments_v1_deployments_proto_rawDescGZIP(), []int{23}
}

func (m *WebsocketTarget) GetTarget() isWebsocketTarget_Target {
	if m != nil {
		return m.Target
	}
	return nil
}

func (x *WebsocketTarget) GetService() string {
	if x, ok := x.GetTarget().(*WebsocketTarget_Service); ok {
		return x.Service
	}
	return ""
}

type isWebsocketTarget_Target interface {
	isWebsocketTarget_Target()
}

type WebsocketTarget_Service struct {
	// The name of an service to target
	Service string `protobuf:"bytes,1,opt,name=service,proto3,oneof"`
}

func (*WebsocketTarget_Service) isWebsocketTarget_Target() {}

type Website struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The production website output directory
	OutputDirectory string `protobuf:"bytes,1,opt,name=output_directory,json=outputDirectory,proto3" json:"output_directory,omitempty"`
	// The index document for the website
	IndexDocument string `protobuf:"bytes,2,opt,name=index_document,json=indexDocument,proto3" json:"index_document,omitempty"`
	// The error document for the website
	ErrorDocument string `protobuf:"bytes,3,opt,name=error_document,json=errorDocument,proto3" json:"error_document,omitempty"`
	// The base path for the website
	BasePath string `protobuf:"bytes,4,opt,name=base_path,json=basePath,proto3" json:"base_path,omitempty"`
}

func (x *Website) Reset() {
	*x = Website{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nitric_proto_deployments_v1_deployments_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Website) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Website) ProtoMessage() {}

func (x *Website) ProtoReflect() protoreflect.Message {
	mi := &file_nitric_proto_deployments_v1_deployments_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Website.ProtoReflect.Descriptor instead.
func (*Website) Descriptor() ([]byte, []int) {
	return file_nitric_proto_deployments_v1_deployments_proto_rawDescGZIP(), []int{24}
}

func (x *Website) GetOutputDirectory() string {
	if x != nil {
		return x.OutputDirectory
	}
	return ""
}

func (x *Website) GetIndexDocument() string {
	if x != nil {
		return x.IndexDocument
	}
	return ""
}

func (x *Website) GetErrorDocument() string {
	if x != nil {
		return x.ErrorDocument
	}
	return ""
}

func (x *Website) GetBasePath() string {
	if x != nil {
		return x.BasePath
	}
	return ""
}

type ScheduleTarget struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Target:
	//
	//	*ScheduleTarget_Service
	Target isScheduleTarget_Target `protobuf_oneof:"target"`
}

func (x *ScheduleTarget) Reset() {
	*x = ScheduleTarget{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nitric_proto_deployments_v1_deployments_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScheduleTarget) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScheduleTarget) ProtoMessage() {}

func (x *ScheduleTarget) ProtoReflect() protoreflect.Message {
	mi := &file_nitric_proto_deployments_v1_deployments_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScheduleTarget.ProtoReflect.Descriptor instead.
func (*ScheduleTarget) Descriptor() ([]byte, []int) {
	return file_nitric_proto_deployments_v1_deployments_proto_rawDescGZIP(), []int{25}
}

func (m *ScheduleTarget) GetTarget() isScheduleTarget_Target {
	if m != nil {
		return m.Target
	}
	return nil
}

func (x *ScheduleTarget) GetService() string {
	if x, ok := x.GetTarget().(*ScheduleTarget_Service); ok {
		return x.Service
	}
	return ""
}

type isScheduleTarget_Target interface {
	isScheduleTarget_Target()
}

type ScheduleTarget_Service struct {
	// The name of an service to target
	Service string `protobuf:"bytes,1,opt,name=service,proto3,oneof"`
}

func (*ScheduleTarget_Service) isScheduleTarget_Target() {}

type Schedule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Target *ScheduleTarget `protobuf:"bytes,1,opt,name=target,proto3" json:"target,omitempty"`
	// Types that are assignable to Cadence:
	//
	//	*Schedule_Every
	//	*Schedule_Cron
	Cadence isSchedule_Cadence `protobuf_oneof:"cadence"`
}

func (x *Schedule) Reset() {
	*x = Schedule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nitric_proto_deployments_v1_deployments_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Schedule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Schedule) ProtoMessage() {}

func (x *Schedule) ProtoReflect() protoreflect.Message {
	mi := &file_nitric_proto_deployments_v1_deployments_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Schedule.ProtoReflect.Descriptor instead.
func (*Schedule) Descriptor() ([]byte, []int) {
	return file_nitric_proto_deployments_v1_deployments_proto_rawDescGZIP(), []int{26}
}

func (x *Schedule) GetTarget() *ScheduleTarget {
	if x != nil {
		return x.Target
	}
	return nil
}

func (m *Schedule) GetCadence() isSchedule_Cadence {
	if m != nil {
		return m.Cadence
	}
	return nil
}

func (x *Schedule) GetEvery() *ScheduleEvery {
	if x, ok := x.GetCadence().(*Schedule_Every); ok {
		return x.Every
	}
	return nil
}

func (x *Schedule) GetCron() *ScheduleCron {
	if x, ok := x.GetCadence().(*Schedule_Cron); ok {
		return x.Cron
	}
	return nil
}

type isSchedule_Cadence interface {
	isSchedule_Cadence()
}

type Schedule_Every struct {
	Every *ScheduleEvery `protobuf:"bytes,10,opt,name=every,proto3,oneof"`
}

type Schedule_Cron struct {
	Cron *ScheduleCron `protobuf:"bytes,11,opt,name=cron,proto3,oneof"`
}

func (*Schedule_Every) isSchedule_Cadence() {}

func (*Schedule_Cron) isSchedule_Cadence() {}

type SqlDatabase struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Migrations:
	//
	//	*SqlDatabase_ImageUri
	Migrations isSqlDatabase_Migrations `protobuf_oneof:"migrations"`
}

func (x *SqlDatabase) Reset() {
	*x = SqlDatabase{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nitric_proto_deployments_v1_deployments_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlDatabase) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlDatabase) ProtoMessage() {}

func (x *SqlDatabase) ProtoReflect() protoreflect.Message {
	mi := &file_nitric_proto_deployments_v1_deployments_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlDatabase.ProtoReflect.Descriptor instead.
func (*SqlDatabase) Descriptor() ([]byte, []int) {
	return file_nitric_proto_deployments_v1_deployments_proto_rawDescGZIP(), []int{27}
}

func (m *SqlDatabase) GetMigrations() isSqlDatabase_Migrations {
	if m != nil {
		return m.Migrations
	}
	return nil
}

func (x *SqlDatabase) GetImageUri() string {
	if x, ok := x.GetMigrations().(*SqlDatabase_ImageUri); ok {
		return x.ImageUri
	}
	return ""
}

type isSqlDatabase_Migrations interface {
	isSqlDatabase_Migrations()
}

type SqlDatabase_ImageUri struct {
	// The URI of a docker image to use to execute the migrations for this database
	ImageUri string `protobuf:"bytes,1,opt,name=image_uri,json=imageUri,proto3,oneof"`
}

func (*SqlDatabase_ImageUri) isSqlDatabase_Migrations() {}

type ScheduleEvery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// rate string e.g. '5 minutes'. Value frequencies are 'minutes', 'hours', 'days'.
	Rate string `protobuf:"bytes,1,opt,name=rate,proto3" json:"rate,omitempty"`
}

func (x *ScheduleEvery) Reset() {
	*x = ScheduleEvery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nitric_proto_deployments_v1_deployments_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScheduleEvery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScheduleEvery) ProtoMessage() {}

func (x *ScheduleEvery) ProtoReflect() protoreflect.Message {
	mi := &file_nitric_proto_deployments_v1_deployments_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScheduleEvery.ProtoReflect.Descriptor instead.
func (*ScheduleEvery) Descriptor() ([]byte, []int) {
	return file_nitric_proto_deployments_v1_deployments_proto_rawDescGZIP(), []int{28}
}

func (x *ScheduleEvery) GetRate() string {
	if x != nil {
		return x.Rate
	}
	return ""
}

type ScheduleCron struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// standard unix cron expression
	Expression string `protobuf:"bytes,1,opt,name=expression,proto3" json:"expression,omitempty"`
}

func (x *ScheduleCron) Reset() {
	*x = ScheduleCron{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nitric_proto_deployments_v1_deployments_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScheduleCron) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScheduleCron) ProtoMessage() {}

func (x *ScheduleCron) ProtoReflect() protoreflect.Message {
	mi := &file_nitric_proto_deployments_v1_deployments_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScheduleCron.ProtoReflect.Descriptor instead.
func (*ScheduleCron) Descriptor() ([]byte, []int) {
	return file_nitric_proto_deployments_v1_deployments_proto_rawDescGZIP(), []int{29}
}

func (x *ScheduleCron) GetExpression() string {
	if x != nil {
		return x.Expression
	}
	return ""
}

type Resource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id *v1.ResourceIdentifier `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Types that are assignable to Config:
	//
	//	*Resource_Service
	//	*Resource_Bucket
	//	*Resource_Topic
	//	*Resource_Api
	//	*Resource_Policy
	//	*Resource_Schedule
	//	*Resource_KeyValueStore
	//	*Resource_Secret
	//	*Resource_Websocket
	//	*Resource_Http
	//	*Resource_Queue
	//	*Resource_SqlDatabase
	//	*Resource_Batch
	//	*Resource_Website
	Config isResource_Config `protobuf_oneof:"config"`
}

func (x *Resource) Reset() {
	*x = Resource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nitric_proto_deployments_v1_deployments_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Resource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Resource) ProtoMessage() {}

func (x *Resource) ProtoReflect() protoreflect.Message {
	mi := &file_nitric_proto_deployments_v1_deployments_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Resource.ProtoReflect.Descriptor instead.
func (*Resource) Descriptor() ([]byte, []int) {
	return file_nitric_proto_deployments_v1_deployments_proto_rawDescGZIP(), []int{30}
}

func (x *Resource) GetId() *v1.ResourceIdentifier {
	if x != nil {
		return x.Id
	}
	return nil
}

func (m *Resource) GetConfig() isResource_Config {
	if m != nil {
		return m.Config
	}
	return nil
}

func (x *Resource) GetService() *Service {
	if x, ok := x.GetConfig().(*Resource_Service); ok {
		return x.Service
	}
	return nil
}

func (x *Resource) GetBucket() *Bucket {
	if x, ok := x.GetConfig().(*Resource_Bucket); ok {
		return x.Bucket
	}
	return nil
}

func (x *Resource) GetTopic() *Topic {
	if x, ok := x.GetConfig().(*Resource_Topic); ok {
		return x.Topic
	}
	return nil
}

func (x *Resource) GetApi() *Api {
	if x, ok := x.GetConfig().(*Resource_Api); ok {
		return x.Api
	}
	return nil
}

func (x *Resource) GetPolicy() *Policy {
	if x, ok := x.GetConfig().(*Resource_Policy); ok {
		return x.Policy
	}
	return nil
}

func (x *Resource) GetSchedule() *Schedule {
	if x, ok := x.GetConfig().(*Resource_Schedule); ok {
		return x.Schedule
	}
	return nil
}

func (x *Resource) GetKeyValueStore() *KeyValueStore {
	if x, ok := x.GetConfig().(*Resource_KeyValueStore); ok {
		return x.KeyValueStore
	}
	return nil
}

func (x *Resource) GetSecret() *Secret {
	if x, ok := x.GetConfig().(*Resource_Secret); ok {
		return x.Secret
	}
	return nil
}

func (x *Resource) GetWebsocket() *Websocket {
	if x, ok := x.GetConfig().(*Resource_Websocket); ok {
		return x.Websocket
	}
	return nil
}

func (x *Resource) GetHttp() *Http {
	if x, ok := x.GetConfig().(*Resource_Http); ok {
		return x.Http
	}
	return nil
}

func (x *Resource) GetQueue() *Queue {
	if x, ok := x.GetConfig().(*Resource_Queue); ok {
		return x.Queue
	}
	return nil
}

func (x *Resource) GetSqlDatabase() *SqlDatabase {
	if x, ok := x.GetConfig().(*Resource_SqlDatabase); ok {
		return x.SqlDatabase
	}
	return nil
}

func (x *Resource) GetBatch() *Batch {
	if x, ok := x.GetConfig().(*Resource_Batch); ok {
		return x.Batch
	}
	return nil
}

func (x *Resource) GetWebsite() *Website {
	if x, ok := x.GetConfig().(*Resource_Website); ok {
		return x.Website
	}
	return nil
}

type isResource_Config interface {
	isResource_Config()
}

type Resource_Service struct {
	Service *Service `protobuf:"bytes,10,opt,name=service,proto3,oneof"`
}

type Resource_Bucket struct {
	Bucket *Bucket `protobuf:"bytes,11,opt,name=bucket,proto3,oneof"`
}

type Resource_Topic struct {
	Topic *Topic `protobuf:"bytes,12,opt,name=topic,proto3,oneof"`
}

type Resource_Api struct {
	Api *Api `protobuf:"bytes,13,opt,name=api,proto3,oneof"`
}

type Resource_Policy struct {
	Policy *Policy `protobuf:"bytes,14,opt,name=policy,proto3,oneof"`
}

type Resource_Schedule struct {
	Schedule *Schedule `protobuf:"bytes,15,opt,name=schedule,proto3,oneof"`
}

type Resource_KeyValueStore struct {
	KeyValueStore *KeyValueStore `protobuf:"bytes,16,opt,name=key_value_store,json=keyValueStore,proto3,oneof"`
}

type Resource_Secret struct {
	Secret *Secret `protobuf:"bytes,17,opt,name=secret,proto3,oneof"`
}

type Resource_Websocket struct {
	Websocket *Websocket `protobuf:"bytes,18,opt,name=websocket,proto3,oneof"`
}

type Resource_Http struct {
	Http *Http `protobuf:"bytes,19,opt,name=http,proto3,oneof"`
}

type Resource_Queue struct {
	Queue *Queue `protobuf:"bytes,20,opt,name=queue,proto3,oneof"`
}

type Resource_SqlDatabase struct {
	SqlDatabase *SqlDatabase `protobuf:"bytes,21,opt,name=sql_database,json=sqlDatabase,proto3,oneof"`
}

type Resource_Batch struct {
	Batch *Batch `protobuf:"bytes,22,opt,name=batch,proto3,oneof"`
}

type Resource_Website struct {
	Website *Website `protobuf:"bytes,23,opt,name=website,proto3,oneof"`
}

func (*Resource_Service) isResource_Config() {}

func (*Resource_Bucket) isResource_Config() {}

func (*Resource_Topic) isResource_Config() {}

func (*Resource_Api) isResource_Config() {}

func (*Resource_Policy) isResource_Config() {}

func (*Resource_Schedule) isResource_Config() {}

func (*Resource_KeyValueStore) isResource_Config() {}

func (*Resource_Secret) isResource_Config() {}

func (*Resource_Websocket) isResource_Config() {}

func (*Resource_Http) isResource_Config() {}

func (*Resource_Queue) isResource_Config() {}

func (*Resource_SqlDatabase) isResource_Config() {}

func (*Resource_Batch) isResource_Config() {}

func (*Resource_Website) isResource_Config() {}

// This is already defined in the resource contracts,
// unfortunately there are parts we don't want to duplicate, such as API config
type Policy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Principals []*Resource `protobuf:"bytes,1,rep,name=principals,proto3" json:"principals,omitempty"`
	Actions    []v1.Action `protobuf:"varint,2,rep,packed,name=actions,proto3,enum=nitric.proto.resources.v1.Action" json:"actions,omitempty"`
	Resources  []*Resource `protobuf:"bytes,3,rep,name=resources,proto3" json:"resources,omitempty"`
}

func (x *Policy) Reset() {
	*x = Policy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nitric_proto_deployments_v1_deployments_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Policy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Policy) ProtoMessage() {}

func (x *Policy) ProtoReflect() protoreflect.Message {
	mi := &file_nitric_proto_deployments_v1_deployments_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Policy.ProtoReflect.Descriptor instead.
func (*Policy) Descriptor() ([]byte, []int) {
	return file_nitric_proto_deployments_v1_deployments_proto_rawDescGZIP(), []int{31}
}

func (x *Policy) GetPrincipals() []*Resource {
	if x != nil {
		return x.Principals
	}
	return nil
}

func (x *Policy) GetActions() []v1.Action {
	if x != nil {
		return x.Actions
	}
	return nil
}

func (x *Policy) GetResources() []*Resource {
	if x != nil {
		return x.Resources
	}
	return nil
}

type Spec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// list of resources to deploy
	Resources []*Resource `protobuf:"bytes,1,rep,name=resources,proto3" json:"resources,omitempty"`
}

func (x *Spec) Reset() {
	*x = Spec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nitric_proto_deployments_v1_deployments_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Spec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Spec) ProtoMessage() {}

func (x *Spec) ProtoReflect() protoreflect.Message {
	mi := &file_nitric_proto_deployments_v1_deployments_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Spec.ProtoReflect.Descriptor instead.
func (*Spec) Descriptor() ([]byte, []int) {
	return file_nitric_proto_deployments_v1_deployments_proto_rawDescGZIP(), []int{32}
}

func (x *Spec) GetResources() []*Resource {
	if x != nil {
		return x.Resources
	}
	return nil
}

var File_nitric_proto_deployments_v1_deployments_proto protoreflect.FileDescriptor

var file_nitric_proto_deployments_v1_deployments_proto_rawDesc = []byte{
	0x0a, 0x2d, 0x6e, 0x69, 0x74, 0x72, 0x69, 0x63, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x64,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x1b, 0x6e, 0x69, 0x74, 0x72, 0x69, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x64, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x1a, 0x1c, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x21, 0x6e, 0x69, 0x74, 0x72,
	0x69, 0x63, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x2f, 0x76,
	0x31, 0x2f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x29, 0x6e,
	0x69, 0x74, 0x72, 0x69, 0x63, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x25, 0x6e, 0x69, 0x74, 0x72, 0x69, 0x63,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2f, 0x76,
	0x31, 0x2f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0xa7, 0x01, 0x0a, 0x13, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x70,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x35, 0x0a, 0x04, 0x73, 0x70, 0x65, 0x63, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6e, 0x69, 0x74, 0x72, 0x69, 0x63, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x52, 0x04, 0x73, 0x70, 0x65, 0x63, 0x12, 0x37,
	0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x0a, 0x61, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x22, 0xc2, 0x01, 0x0a, 0x11, 0x44, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x70, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12,
	0x1a, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x45, 0x0a, 0x06, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6e, 0x69,
	0x74, 0x72, 0x69, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x06, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x12, 0x3f, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6e, 0x69, 0x74, 0x72, 0x69, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x55, 0x70, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x48, 0x00, 0x52, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x42, 0x09, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0xaa,
	0x02, 0x0a, 0x0e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x12, 0x3d, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e,
	0x6e, 0x69, 0x74, 0x72, 0x69, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x4d, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x35, 0x2e, 0x6e, 0x69, 0x74, 0x72, 0x69, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x4d, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x35, 0x2e, 0x6e, 0x69, 0x74, 0x72, 0x69, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x64,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x21,
	0x0a, 0x0c, 0x73, 0x75, 0x62, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x75, 0x62, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x45, 0x0a, 0x08, 0x55,
	0x70, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x12, 0x14, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x42, 0x09, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x22, 0x72, 0x0a, 0x15, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x44, 0x6f, 0x77, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x37, 0x0a, 0x0a, 0x61,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x22, 0xc6, 0x01, 0x0a, 0x13, 0x44, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x6f, 0x77, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x1a,
	0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x41, 0x0a, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6e, 0x69, 0x74,
	0x72, 0x69, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x6f, 0x77, 0x6e, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x48, 0x00, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x45, 0x0a,
	0x06, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e,
	0x6e, 0x69, 0x74, 0x72, 0x69, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x64, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x06, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22,
	0x0c, 0x0a, 0x0a, 0x44, 0x6f, 0x77, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x1f, 0x0a,
	0x0b, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x10, 0x0a, 0x03,
	0x75, 0x72, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x69, 0x22, 0xb6,
	0x02, 0x0a, 0x07, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x40, 0x0a, 0x05, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6e, 0x69, 0x74, 0x72,
	0x69, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x48, 0x00, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x77,
	0x6f, 0x72, 0x6b, 0x65, 0x72, 0x73, 0x12, 0x1c, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75,
	0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x42, 0x02, 0x18, 0x01, 0x52, 0x07, 0x74, 0x69, 0x6d,
	0x65, 0x6f, 0x75, 0x74, 0x12, 0x1a, 0x0a, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x05, 0x42, 0x02, 0x18, 0x01, 0x52, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x3f, 0x0a, 0x03, 0x65, 0x6e, 0x76, 0x18, 0x0e, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2d, 0x2e, 0x6e, 0x69, 0x74, 0x72, 0x69, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x45, 0x6e, 0x76, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x03, 0x65, 0x6e, 0x76, 0x1a, 0x36, 0x0a, 0x08, 0x45, 0x6e, 0x76, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x08, 0x0a,
	0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0x6d, 0x0a, 0x03, 0x4a, 0x6f, 0x62, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x52, 0x0a, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x6e, 0x69, 0x74, 0x72, 0x69,
	0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x76, 0x31,
	0x2e, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x94, 0x02, 0x0a, 0x05, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x12, 0x40, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x6e, 0x69, 0x74, 0x72, 0x69, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x64,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x48, 0x00, 0x52, 0x05, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x3d, 0x0a, 0x03, 0x65, 0x6e, 0x76, 0x18, 0x0b, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6e, 0x69, 0x74, 0x72, 0x69, 0x63, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x45, 0x6e, 0x76, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x03, 0x65, 0x6e, 0x76, 0x12, 0x34, 0x0a, 0x04, 0x6a, 0x6f, 0x62, 0x73, 0x18, 0x0c, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6e, 0x69, 0x74, 0x72, 0x69, 0x63, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x4a, 0x6f, 0x62, 0x52, 0x04, 0x6a, 0x6f, 0x62, 0x73, 0x1a, 0x36, 0x0a, 0x08, 0x45,
	0x6e, 0x76, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0x53, 0x0a,
	0x06, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x49, 0x0a, 0x09, 0x6c, 0x69, 0x73, 0x74, 0x65,
	0x6e, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6e, 0x69, 0x74,
	0x72, 0x69, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x4c,
	0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x52, 0x09, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65,
	0x72, 0x73, 0x22, 0x7c, 0x0a, 0x0e, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74,
	0x65, 0x6e, 0x65, 0x72, 0x12, 0x44, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6e, 0x69, 0x74, 0x72, 0x69, 0x63, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1a, 0x0a, 0x07, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x22, 0x5e, 0x0a, 0x05, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x55, 0x0a, 0x0d, 0x73, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2f, 0x2e, 0x6e, 0x69, 0x74, 0x72, 0x69, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x52, 0x0d, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x22, 0x07, 0x0a, 0x05, 0x51, 0x75, 0x65, 0x75, 0x65, 0x22, 0x0f, 0x0a, 0x0d, 0x4b, 0x65, 0x79,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x22, 0x08, 0x0a, 0x06, 0x53, 0x65,
	0x63, 0x72, 0x65, 0x74, 0x22, 0x3a, 0x0a, 0x12, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x1a, 0x0a, 0x07, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x22, 0x5c, 0x0a, 0x11, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x47, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x6e, 0x69, 0x74, 0x72, 0x69, 0x63, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x22, 0x32,
	0x0a, 0x0a, 0x48, 0x74, 0x74, 0x70, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x1a, 0x0a, 0x07,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x22, 0x47, 0x0a, 0x04, 0x48, 0x74, 0x74, 0x70, 0x12, 0x3f, 0x0a, 0x06, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6e, 0x69, 0x74,
	0x72, 0x69, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x74, 0x74, 0x70, 0x54, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x22, 0x2d, 0x0a, 0x03, 0x41,
	0x70, 0x69, 0x12, 0x1a, 0x0a, 0x07, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x42, 0x0a,
	0x0a, 0x08, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x90, 0x02, 0x0a, 0x09, 0x57,
	0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x53, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2c, 0x2e, 0x6e, 0x69, 0x74, 0x72, 0x69, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x57,
	0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x0d,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x59, 0x0a,
	0x11, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x5f, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6e, 0x69, 0x74, 0x72, 0x69,
	0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74,
	0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x10, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x53, 0x0a, 0x0e, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2c, 0x2e, 0x6e, 0x69, 0x74, 0x72, 0x69, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x57,
	0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x0d,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x22, 0x37, 0x0a,
	0x0f, 0x57, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x12, 0x1a, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x42, 0x08, 0x0a, 0x06,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x22, 0x9f, 0x01, 0x0a, 0x07, 0x57, 0x65, 0x62, 0x73, 0x69,
	0x74, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x64, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x25, 0x0a,
	0x0e, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x44, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x64, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x62,
	0x61, 0x73, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x62, 0x61, 0x73, 0x65, 0x50, 0x61, 0x74, 0x68, 0x22, 0x36, 0x0a, 0x0e, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x1a, 0x0a, 0x07, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x22, 0xdf, 0x01, 0x0a, 0x08, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x43, 0x0a,
	0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e,
	0x6e, 0x69, 0x74, 0x72, 0x69, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x64, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x12, 0x42, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x72, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2a, 0x2e, 0x6e, 0x69, 0x74, 0x72, 0x69, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x45, 0x76, 0x65, 0x72, 0x79, 0x48, 0x00, 0x52,
	0x05, 0x65, 0x76, 0x65, 0x72, 0x79, 0x12, 0x3f, 0x0a, 0x04, 0x63, 0x72, 0x6f, 0x6e, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6e, 0x69, 0x74, 0x72, 0x69, 0x63, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x43, 0x72, 0x6f, 0x6e, 0x48,
	0x00, 0x52, 0x04, 0x63, 0x72, 0x6f, 0x6e, 0x42, 0x09, 0x0a, 0x07, 0x63, 0x61, 0x64, 0x65, 0x6e,
	0x63, 0x65, 0x22, 0x3a, 0x0a, 0x0b, 0x53, 0x71, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73,
	0x65, 0x12, 0x1d, 0x0a, 0x09, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x72, 0x69,
	0x42, 0x0c, 0x0a, 0x0a, 0x6d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x23,
	0x0a, 0x0d, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x45, 0x76, 0x65, 0x72, 0x79, 0x12,
	0x12, 0x0a, 0x04, 0x72, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72,
	0x61, 0x74, 0x65, 0x22, 0x2e, 0x0a, 0x0c, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x43,
	0x72, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x22, 0xe9, 0x07, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x12, 0x3d, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x6e,
	0x69, 0x74, 0x72, 0x69, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x40, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x6e, 0x69, 0x74, 0x72, 0x69, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x48, 0x00, 0x52, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x3d, 0x0a, 0x06, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x6e, 0x69, 0x74, 0x72, 0x69, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x48, 0x00, 0x52, 0x06, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74,
	0x12, 0x3a, 0x0a, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x6e, 0x69, 0x74, 0x72, 0x69, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x64,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6f,
	0x70, 0x69, 0x63, 0x48, 0x00, 0x52, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x34, 0x0a, 0x03,
	0x61, 0x70, 0x69, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6e, 0x69, 0x74, 0x72,
	0x69, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x69, 0x48, 0x00, 0x52, 0x03, 0x61,
	0x70, 0x69, 0x12, 0x3d, 0x0a, 0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6e, 0x69, 0x74, 0x72, 0x69, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x48, 0x00, 0x52, 0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x12, 0x43, 0x0a, 0x08, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6e, 0x69, 0x74, 0x72, 0x69, 0x63, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x48, 0x00, 0x52, 0x08, 0x73, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x54, 0x0a, 0x0f, 0x6b, 0x65, 0x79, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2a, 0x2e, 0x6e, 0x69, 0x74, 0x72, 0x69, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x64,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x65,
	0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x48, 0x00, 0x52, 0x0d, 0x6b,
	0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x3d, 0x0a, 0x06,
	0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6e,
	0x69, 0x74, 0x72, 0x69, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x64, 0x65, 0x70, 0x6c,
	0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x48, 0x00, 0x52, 0x06, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x46, 0x0a, 0x09, 0x77,
	0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26,
	0x2e, 0x6e, 0x69, 0x74, 0x72, 0x69, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x64, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x65, 0x62,
	0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x48, 0x00, 0x52, 0x09, 0x77, 0x65, 0x62, 0x73, 0x6f, 0x63,
	0x6b, 0x65, 0x74, 0x12, 0x37, 0x0a, 0x04, 0x68, 0x74, 0x74, 0x70, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x6e, 0x69, 0x74, 0x72, 0x69, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x48, 0x74, 0x74, 0x70, 0x48, 0x00, 0x52, 0x04, 0x68, 0x74, 0x74, 0x70, 0x12, 0x3a, 0x0a, 0x05,
	0x71, 0x75, 0x65, 0x75, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6e, 0x69,
	0x74, 0x72, 0x69, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x48,
	0x00, 0x52, 0x05, 0x71, 0x75, 0x65, 0x75, 0x65, 0x12, 0x4d, 0x0a, 0x0c, 0x73, 0x71, 0x6c, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x6e, 0x69, 0x74, 0x72, 0x69, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x64, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c,
	0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x48, 0x00, 0x52, 0x0b, 0x73, 0x71, 0x6c, 0x44,
	0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x05, 0x62, 0x61, 0x74, 0x63, 0x68,
	0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6e, 0x69, 0x74, 0x72, 0x69, 0x63, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x48, 0x00, 0x52, 0x05, 0x62, 0x61,
	0x74, 0x63, 0x68, 0x12, 0x40, 0x0a, 0x07, 0x77, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x18, 0x17,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6e, 0x69, 0x74, 0x72, 0x69, 0x63, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x57, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x48, 0x00, 0x52, 0x07, 0x77, 0x65,
	0x62, 0x73, 0x69, 0x74, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22,
	0xd1, 0x01, 0x0a, 0x06, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x45, 0x0a, 0x0a, 0x70, 0x72,
	0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25,
	0x2e, 0x6e, 0x69, 0x74, 0x72, 0x69, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x64, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x0a, 0x70, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c,
	0x73, 0x12, 0x3b, 0x0a, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0e, 0x32, 0x21, 0x2e, 0x6e, 0x69, 0x74, 0x72, 0x69, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x43,
	0x0a, 0x09, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x25, 0x2e, 0x6e, 0x69, 0x74, 0x72, 0x69, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x09, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x73, 0x22, 0x4b, 0x0a, 0x04, 0x53, 0x70, 0x65, 0x63, 0x12, 0x43, 0x0a, 0x09, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25,
	0x2e, 0x6e, 0x69, 0x74, 0x72, 0x69, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x64, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x09, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73,
	0x2a, 0x55, 0x0a, 0x18, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x65, 0x70, 0x6c,
	0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0a, 0x0a, 0x06,
	0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x55, 0x50, 0x44, 0x41,
	0x54, 0x45, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x45, 0x50, 0x4c, 0x41, 0x43, 0x45, 0x10,
	0x02, 0x12, 0x08, 0x0a, 0x04, 0x53, 0x41, 0x4d, 0x45, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x44,
	0x45, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x04, 0x2a, 0x51, 0x0a, 0x18, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x00,
	0x12, 0x0f, 0x0a, 0x0b, 0x49, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x47, 0x52, 0x45, 0x53, 0x53, 0x10,
	0x01, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x02, 0x12, 0x0a,
	0x0a, 0x06, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x03, 0x32, 0xe6, 0x01, 0x0a, 0x0a, 0x44,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x68, 0x0a, 0x02, 0x55, 0x70, 0x12,
	0x30, 0x2e, 0x6e, 0x69, 0x74, 0x72, 0x69, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x64,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2e, 0x2e, 0x6e, 0x69, 0x74, 0x72, 0x69, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x70, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x30, 0x01, 0x12, 0x6e, 0x0a, 0x04, 0x44, 0x6f, 0x77, 0x6e, 0x12, 0x32, 0x2e, 0x6e, 0x69,
	0x74, 0x72, 0x69, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x44, 0x6f, 0x77, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x30, 0x2e, 0x6e, 0x69, 0x74, 0x72, 0x69, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x64,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x6f, 0x77, 0x6e, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x30, 0x01, 0x42, 0xbc, 0x01, 0x0a, 0x1e, 0x69, 0x6f, 0x2e, 0x6e, 0x69, 0x74, 0x72, 0x69,
	0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x42, 0x12, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x01, 0x5a, 0x48, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6e, 0x69, 0x74, 0x72, 0x69, 0x63, 0x74,
	0x65, 0x63, 0x68, 0x2f, 0x6e, 0x69, 0x74, 0x72, 0x69, 0x63, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f,
	0x70, 0x6b, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x76, 0x31, 0x3b, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x70, 0x62, 0xaa, 0x02, 0x1b, 0x4e, 0x69, 0x74, 0x72, 0x69, 0x63, 0x2e,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x2e, 0x76, 0x31, 0xca, 0x02, 0x1b, 0x4e, 0x69, 0x74, 0x72, 0x69, 0x63, 0x5c, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x5c, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5c,
	0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_nitric_proto_deployments_v1_deployments_proto_rawDescOnce sync.Once
	file_nitric_proto_deployments_v1_deployments_proto_rawDescData = file_nitric_proto_deployments_v1_deployments_proto_rawDesc
)

func file_nitric_proto_deployments_v1_deployments_proto_rawDescGZIP() []byte {
	file_nitric_proto_deployments_v1_deployments_proto_rawDescOnce.Do(func() {
		file_nitric_proto_deployments_v1_deployments_proto_rawDescData = protoimpl.X.CompressGZIP(file_nitric_proto_deployments_v1_deployments_proto_rawDescData)
	})
	return file_nitric_proto_deployments_v1_deployments_proto_rawDescData
}

var file_nitric_proto_deployments_v1_deployments_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_nitric_proto_deployments_v1_deployments_proto_msgTypes = make([]protoimpl.MessageInfo, 35)
var file_nitric_proto_deployments_v1_deployments_proto_goTypes = []interface{}{
	(ResourceDeploymentAction)(0),       // 0: nitric.proto.deployments.v1.ResourceDeploymentAction
	(ResourceDeploymentStatus)(0),       // 1: nitric.proto.deployments.v1.ResourceDeploymentStatus
	(*DeploymentUpRequest)(nil),         // 2: nitric.proto.deployments.v1.DeploymentUpRequest
	(*DeploymentUpEvent)(nil),           // 3: nitric.proto.deployments.v1.DeploymentUpEvent
	(*ResourceUpdate)(nil),              // 4: nitric.proto.deployments.v1.ResourceUpdate
	(*UpResult)(nil),                    // 5: nitric.proto.deployments.v1.UpResult
	(*DeploymentDownRequest)(nil),       // 6: nitric.proto.deployments.v1.DeploymentDownRequest
	(*DeploymentDownEvent)(nil),         // 7: nitric.proto.deployments.v1.DeploymentDownEvent
	(*DownResult)(nil),                  // 8: nitric.proto.deployments.v1.DownResult
	(*ImageSource)(nil),                 // 9: nitric.proto.deployments.v1.ImageSource
	(*Service)(nil),                     // 10: nitric.proto.deployments.v1.Service
	(*Job)(nil),                         // 11: nitric.proto.deployments.v1.Job
	(*Batch)(nil),                       // 12: nitric.proto.deployments.v1.Batch
	(*Bucket)(nil),                      // 13: nitric.proto.deployments.v1.Bucket
	(*BucketListener)(nil),              // 14: nitric.proto.deployments.v1.BucketListener
	(*Topic)(nil),                       // 15: nitric.proto.deployments.v1.Topic
	(*Queue)(nil),                       // 16: nitric.proto.deployments.v1.Queue
	(*KeyValueStore)(nil),               // 17: nitric.proto.deployments.v1.KeyValueStore
	(*Secret)(nil),                      // 18: nitric.proto.deployments.v1.Secret
	(*SubscriptionTarget)(nil),          // 19: nitric.proto.deployments.v1.SubscriptionTarget
	(*TopicSubscription)(nil),           // 20: nitric.proto.deployments.v1.TopicSubscription
	(*HttpTarget)(nil),                  // 21: nitric.proto.deployments.v1.HttpTarget
	(*Http)(nil),                        // 22: nitric.proto.deployments.v1.Http
	(*Api)(nil),                         // 23: nitric.proto.deployments.v1.Api
	(*Websocket)(nil),                   // 24: nitric.proto.deployments.v1.Websocket
	(*WebsocketTarget)(nil),             // 25: nitric.proto.deployments.v1.WebsocketTarget
	(*Website)(nil),                     // 26: nitric.proto.deployments.v1.Website
	(*ScheduleTarget)(nil),              // 27: nitric.proto.deployments.v1.ScheduleTarget
	(*Schedule)(nil),                    // 28: nitric.proto.deployments.v1.Schedule
	(*SqlDatabase)(nil),                 // 29: nitric.proto.deployments.v1.SqlDatabase
	(*ScheduleEvery)(nil),               // 30: nitric.proto.deployments.v1.ScheduleEvery
	(*ScheduleCron)(nil),                // 31: nitric.proto.deployments.v1.ScheduleCron
	(*Resource)(nil),                    // 32: nitric.proto.deployments.v1.Resource
	(*Policy)(nil),                      // 33: nitric.proto.deployments.v1.Policy
	(*Spec)(nil),                        // 34: nitric.proto.deployments.v1.Spec
	nil,                                 // 35: nitric.proto.deployments.v1.Service.EnvEntry
	nil,                                 // 36: nitric.proto.deployments.v1.Batch.EnvEntry
	(*structpb.Struct)(nil),             // 37: google.protobuf.Struct
	(*v1.ResourceIdentifier)(nil),       // 38: nitric.proto.resources.v1.ResourceIdentifier
	(*v11.JobResourceRequirements)(nil), // 39: nitric.proto.batch.v1.JobResourceRequirements
	(*v12.RegistrationRequest)(nil),     // 40: nitric.proto.storage.v1.RegistrationRequest
	(v1.Action)(0),                      // 41: nitric.proto.resources.v1.Action
}
var file_nitric_proto_deployments_v1_deployments_proto_depIdxs = []int32{
	34, // 0: nitric.proto.deployments.v1.DeploymentUpRequest.spec:type_name -> nitric.proto.deployments.v1.Spec
	37, // 1: nitric.proto.deployments.v1.DeploymentUpRequest.attributes:type_name -> google.protobuf.Struct
	4,  // 2: nitric.proto.deployments.v1.DeploymentUpEvent.update:type_name -> nitric.proto.deployments.v1.ResourceUpdate
	5,  // 3: nitric.proto.deployments.v1.DeploymentUpEvent.result:type_name -> nitric.proto.deployments.v1.UpResult
	38, // 4: nitric.proto.deployments.v1.ResourceUpdate.id:type_name -> nitric.proto.resources.v1.ResourceIdentifier
	0,  // 5: nitric.proto.deployments.v1.ResourceUpdate.action:type_name -> nitric.proto.deployments.v1.ResourceDeploymentAction
	1,  // 6: nitric.proto.deployments.v1.ResourceUpdate.status:type_name -> nitric.proto.deployments.v1.ResourceDeploymentStatus
	37, // 7: nitric.proto.deployments.v1.DeploymentDownRequest.attributes:type_name -> google.protobuf.Struct
	8,  // 8: nitric.proto.deployments.v1.DeploymentDownEvent.result:type_name -> nitric.proto.deployments.v1.DownResult
	4,  // 9: nitric.proto.deployments.v1.DeploymentDownEvent.update:type_name -> nitric.proto.deployments.v1.ResourceUpdate
	9,  // 10: nitric.proto.deployments.v1.Service.image:type_name -> nitric.proto.deployments.v1.ImageSource
	35, // 11: nitric.proto.deployments.v1.Service.env:type_name -> nitric.proto.deployments.v1.Service.EnvEntry
	39, // 12: nitric.proto.deployments.v1.Job.requirements:type_name -> nitric.proto.batch.v1.JobResourceRequirements
	9,  // 13: nitric.proto.deployments.v1.Batch.image:type_name -> nitric.proto.deployments.v1.ImageSource
	36, // 14: nitric.proto.deployments.v1.Batch.env:type_name -> nitric.proto.deployments.v1.Batch.EnvEntry
	11, // 15: nitric.proto.deployments.v1.Batch.jobs:type_name -> nitric.proto.deployments.v1.Job
	14, // 16: nitric.proto.deployments.v1.Bucket.listeners:type_name -> nitric.proto.deployments.v1.BucketListener
	40, // 17: nitric.proto.deployments.v1.BucketListener.config:type_name -> nitric.proto.storage.v1.RegistrationRequest
	19, // 18: nitric.proto.deployments.v1.Topic.subscriptions:type_name -> nitric.proto.deployments.v1.SubscriptionTarget
	19, // 19: nitric.proto.deployments.v1.TopicSubscription.target:type_name -> nitric.proto.deployments.v1.SubscriptionTarget
	21, // 20: nitric.proto.deployments.v1.Http.target:type_name -> nitric.proto.deployments.v1.HttpTarget
	25, // 21: nitric.proto.deployments.v1.Websocket.connect_target:type_name -> nitric.proto.deployments.v1.WebsocketTarget
	25, // 22: nitric.proto.deployments.v1.Websocket.disconnect_target:type_name -> nitric.proto.deployments.v1.WebsocketTarget
	25, // 23: nitric.proto.deployments.v1.Websocket.message_target:type_name -> nitric.proto.deployments.v1.WebsocketTarget
	27, // 24: nitric.proto.deployments.v1.Schedule.target:type_name -> nitric.proto.deployments.v1.ScheduleTarget
	30, // 25: nitric.proto.deployments.v1.Schedule.every:type_name -> nitric.proto.deployments.v1.ScheduleEvery
	31, // 26: nitric.proto.deployments.v1.Schedule.cron:type_name -> nitric.proto.deployments.v1.ScheduleCron
	38, // 27: nitric.proto.deployments.v1.Resource.id:type_name -> nitric.proto.resources.v1.ResourceIdentifier
	10, // 28: nitric.proto.deployments.v1.Resource.service:type_name -> nitric.proto.deployments.v1.Service
	13, // 29: nitric.proto.deployments.v1.Resource.bucket:type_name -> nitric.proto.deployments.v1.Bucket
	15, // 30: nitric.proto.deployments.v1.Resource.topic:type_name -> nitric.proto.deployments.v1.Topic
	23, // 31: nitric.proto.deployments.v1.Resource.api:type_name -> nitric.proto.deployments.v1.Api
	33, // 32: nitric.proto.deployments.v1.Resource.policy:type_name -> nitric.proto.deployments.v1.Policy
	28, // 33: nitric.proto.deployments.v1.Resource.schedule:type_name -> nitric.proto.deployments.v1.Schedule
	17, // 34: nitric.proto.deployments.v1.Resource.key_value_store:type_name -> nitric.proto.deployments.v1.KeyValueStore
	18, // 35: nitric.proto.deployments.v1.Resource.secret:type_name -> nitric.proto.deployments.v1.Secret
	24, // 36: nitric.proto.deployments.v1.Resource.websocket:type_name -> nitric.proto.deployments.v1.Websocket
	22, // 37: nitric.proto.deployments.v1.Resource.http:type_name -> nitric.proto.deployments.v1.Http
	16, // 38: nitric.proto.deployments.v1.Resource.queue:type_name -> nitric.proto.deployments.v1.Queue
	29, // 39: nitric.proto.deployments.v1.Resource.sql_database:type_name -> nitric.proto.deployments.v1.SqlDatabase
	12, // 40: nitric.proto.deployments.v1.Resource.batch:type_name -> nitric.proto.deployments.v1.Batch
	26, // 41: nitric.proto.deployments.v1.Resource.website:type_name -> nitric.proto.deployments.v1.Website
	32, // 42: nitric.proto.deployments.v1.Policy.principals:type_name -> nitric.proto.deployments.v1.Resource
	41, // 43: nitric.proto.deployments.v1.Policy.actions:type_name -> nitric.proto.resources.v1.Action
	32, // 44: nitric.proto.deployments.v1.Policy.resources:type_name -> nitric.proto.deployments.v1.Resource
	32, // 45: nitric.proto.deployments.v1.Spec.resources:type_name -> nitric.proto.deployments.v1.Resource
	2,  // 46: nitric.proto.deployments.v1.Deployment.Up:input_type -> nitric.proto.deployments.v1.DeploymentUpRequest
	6,  // 47: nitric.proto.deployments.v1.Deployment.Down:input_type -> nitric.proto.deployments.v1.DeploymentDownRequest
	3,  // 48: nitric.proto.deployments.v1.Deployment.Up:output_type -> nitric.proto.deployments.v1.DeploymentUpEvent
	7,  // 49: nitric.proto.deployments.v1.Deployment.Down:output_type -> nitric.proto.deployments.v1.DeploymentDownEvent
	48, // [48:50] is the sub-list for method output_type
	46, // [46:48] is the sub-list for method input_type
	46, // [46:46] is the sub-list for extension type_name
	46, // [46:46] is the sub-list for extension extendee
	0,  // [0:46] is the sub-list for field type_name
}

func init() { file_nitric_proto_deployments_v1_deployments_proto_init() }
func file_nitric_proto_deployments_v1_deployments_proto_init() {
	if File_nitric_proto_deployments_v1_deployments_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_nitric_proto_deployments_v1_deployments_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeploymentUpRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nitric_proto_deployments_v1_deployments_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeploymentUpEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nitric_proto_deployments_v1_deployments_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResourceUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nitric_proto_deployments_v1_deployments_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nitric_proto_deployments_v1_deployments_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeploymentDownRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nitric_proto_deployments_v1_deployments_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeploymentDownEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nitric_proto_deployments_v1_deployments_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DownResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nitric_proto_deployments_v1_deployments_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImageSource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nitric_proto_deployments_v1_deployments_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Service); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nitric_proto_deployments_v1_deployments_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Job); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nitric_proto_deployments_v1_deployments_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Batch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nitric_proto_deployments_v1_deployments_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bucket); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nitric_proto_deployments_v1_deployments_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BucketListener); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nitric_proto_deployments_v1_deployments_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Topic); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nitric_proto_deployments_v1_deployments_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Queue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nitric_proto_deployments_v1_deployments_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeyValueStore); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nitric_proto_deployments_v1_deployments_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Secret); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nitric_proto_deployments_v1_deployments_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscriptionTarget); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nitric_proto_deployments_v1_deployments_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TopicSubscription); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nitric_proto_deployments_v1_deployments_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HttpTarget); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nitric_proto_deployments_v1_deployments_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Http); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nitric_proto_deployments_v1_deployments_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Api); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nitric_proto_deployments_v1_deployments_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Websocket); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nitric_proto_deployments_v1_deployments_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WebsocketTarget); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nitric_proto_deployments_v1_deployments_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Website); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nitric_proto_deployments_v1_deployments_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScheduleTarget); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nitric_proto_deployments_v1_deployments_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Schedule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nitric_proto_deployments_v1_deployments_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlDatabase); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nitric_proto_deployments_v1_deployments_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScheduleEvery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nitric_proto_deployments_v1_deployments_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScheduleCron); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nitric_proto_deployments_v1_deployments_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Resource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nitric_proto_deployments_v1_deployments_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Policy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nitric_proto_deployments_v1_deployments_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Spec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_nitric_proto_deployments_v1_deployments_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*DeploymentUpEvent_Message)(nil),
		(*DeploymentUpEvent_Update)(nil),
		(*DeploymentUpEvent_Result)(nil),
	}
	file_nitric_proto_deployments_v1_deployments_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*UpResult_Text)(nil),
	}
	file_nitric_proto_deployments_v1_deployments_proto_msgTypes[5].OneofWrappers = []interface{}{
		(*DeploymentDownEvent_Message)(nil),
		(*DeploymentDownEvent_Result)(nil),
		(*DeploymentDownEvent_Update)(nil),
	}
	file_nitric_proto_deployments_v1_deployments_proto_msgTypes[8].OneofWrappers = []interface{}{
		(*Service_Image)(nil),
	}
	file_nitric_proto_deployments_v1_deployments_proto_msgTypes[10].OneofWrappers = []interface{}{
		(*Batch_Image)(nil),
	}
	file_nitric_proto_deployments_v1_deployments_proto_msgTypes[12].OneofWrappers = []interface{}{
		(*BucketListener_Service)(nil),
	}
	file_nitric_proto_deployments_v1_deployments_proto_msgTypes[17].OneofWrappers = []interface{}{
		(*SubscriptionTarget_Service)(nil),
	}
	file_nitric_proto_deployments_v1_deployments_proto_msgTypes[19].OneofWrappers = []interface{}{
		(*HttpTarget_Service)(nil),
	}
	file_nitric_proto_deployments_v1_deployments_proto_msgTypes[21].OneofWrappers = []interface{}{
		(*Api_Openapi)(nil),
	}
	file_nitric_proto_deployments_v1_deployments_proto_msgTypes[23].OneofWrappers = []interface{}{
		(*WebsocketTarget_Service)(nil),
	}
	file_nitric_proto_deployments_v1_deployments_proto_msgTypes[25].OneofWrappers = []interface{}{
		(*ScheduleTarget_Service)(nil),
	}
	file_nitric_proto_deployments_v1_deployments_proto_msgTypes[26].OneofWrappers = []interface{}{
		(*Schedule_Every)(nil),
		(*Schedule_Cron)(nil),
	}
	file_nitric_proto_deployments_v1_deployments_proto_msgTypes[27].OneofWrappers = []interface{}{
		(*SqlDatabase_ImageUri)(nil),
	}
	file_nitric_proto_deployments_v1_deployments_proto_msgTypes[30].OneofWrappers = []interface{}{
		(*Resource_Service)(nil),
		(*Resource_Bucket)(nil),
		(*Resource_Topic)(nil),
		(*Resource_Api)(nil),
		(*Resource_Policy)(nil),
		(*Resource_Schedule)(nil),
		(*Resource_KeyValueStore)(nil),
		(*Resource_Secret)(nil),
		(*Resource_Websocket)(nil),
		(*Resource_Http)(nil),
		(*Resource_Queue)(nil),
		(*Resource_SqlDatabase)(nil),
		(*Resource_Batch)(nil),
		(*Resource_Website)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_nitric_proto_deployments_v1_deployments_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   35,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_nitric_proto_deployments_v1_deployments_proto_goTypes,
		DependencyIndexes: file_nitric_proto_deployments_v1_deployments_proto_depIdxs,
		EnumInfos:         file_nitric_proto_deployments_v1_deployments_proto_enumTypes,
		MessageInfos:      file_nitric_proto_deployments_v1_deployments_proto_msgTypes,
	}.Build()
	File_nitric_proto_deployments_v1_deployments_proto = out.File
	file_nitric_proto_deployments_v1_deployments_proto_rawDesc = nil
	file_nitric_proto_deployments_v1_deployments_proto_goTypes = nil
	file_nitric_proto_deployments_v1_deployments_proto_depIdxs = nil
}
