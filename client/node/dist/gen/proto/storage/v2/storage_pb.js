"use strict";
// source: proto/storage/v2/storage.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck
var jspb = require('google-protobuf');
var goog = jspb;
var global = (function () {
    if (this) {
        return this;
    }
    if (typeof window !== 'undefined') {
        return window;
    }
    if (typeof global !== 'undefined') {
        return global;
    }
    if (typeof self !== 'undefined') {
        return self;
    }
    return Function('return this')();
}.call(null));
var google_protobuf_duration_pb = require('google-protobuf/google/protobuf/duration_pb.js');
goog.object.extend(proto, google_protobuf_duration_pb);
goog.exportSymbol('proto.nitric.proto.storage.v2.Blob', null, global);
goog.exportSymbol('proto.nitric.proto.storage.v2.StorageDeleteRequest', null, global);
goog.exportSymbol('proto.nitric.proto.storage.v2.StorageDeleteResponse', null, global);
goog.exportSymbol('proto.nitric.proto.storage.v2.StorageExistsRequest', null, global);
goog.exportSymbol('proto.nitric.proto.storage.v2.StorageExistsResponse', null, global);
goog.exportSymbol('proto.nitric.proto.storage.v2.StorageListBlobsRequest', null, global);
goog.exportSymbol('proto.nitric.proto.storage.v2.StorageListBlobsResponse', null, global);
goog.exportSymbol('proto.nitric.proto.storage.v2.StoragePreSignUrlRequest', null, global);
goog.exportSymbol('proto.nitric.proto.storage.v2.StoragePreSignUrlRequest.Operation', null, global);
goog.exportSymbol('proto.nitric.proto.storage.v2.StoragePreSignUrlResponse', null, global);
goog.exportSymbol('proto.nitric.proto.storage.v2.StorageReadRequest', null, global);
goog.exportSymbol('proto.nitric.proto.storage.v2.StorageReadResponse', null, global);
goog.exportSymbol('proto.nitric.proto.storage.v2.StorageWriteRequest', null, global);
goog.exportSymbol('proto.nitric.proto.storage.v2.StorageWriteResponse', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nitric.proto.storage.v2.StorageWriteRequest = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nitric.proto.storage.v2.StorageWriteRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.nitric.proto.storage.v2.StorageWriteRequest.displayName = 'proto.nitric.proto.storage.v2.StorageWriteRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nitric.proto.storage.v2.StorageWriteResponse = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nitric.proto.storage.v2.StorageWriteResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.nitric.proto.storage.v2.StorageWriteResponse.displayName = 'proto.nitric.proto.storage.v2.StorageWriteResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nitric.proto.storage.v2.StorageReadRequest = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nitric.proto.storage.v2.StorageReadRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.nitric.proto.storage.v2.StorageReadRequest.displayName = 'proto.nitric.proto.storage.v2.StorageReadRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nitric.proto.storage.v2.StorageReadResponse = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nitric.proto.storage.v2.StorageReadResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.nitric.proto.storage.v2.StorageReadResponse.displayName = 'proto.nitric.proto.storage.v2.StorageReadResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nitric.proto.storage.v2.StorageDeleteRequest = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nitric.proto.storage.v2.StorageDeleteRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.nitric.proto.storage.v2.StorageDeleteRequest.displayName = 'proto.nitric.proto.storage.v2.StorageDeleteRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nitric.proto.storage.v2.StorageDeleteResponse = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nitric.proto.storage.v2.StorageDeleteResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.nitric.proto.storage.v2.StorageDeleteResponse.displayName = 'proto.nitric.proto.storage.v2.StorageDeleteResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nitric.proto.storage.v2.StoragePreSignUrlRequest = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nitric.proto.storage.v2.StoragePreSignUrlRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.nitric.proto.storage.v2.StoragePreSignUrlRequest.displayName = 'proto.nitric.proto.storage.v2.StoragePreSignUrlRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nitric.proto.storage.v2.StoragePreSignUrlResponse = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nitric.proto.storage.v2.StoragePreSignUrlResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.nitric.proto.storage.v2.StoragePreSignUrlResponse.displayName = 'proto.nitric.proto.storage.v2.StoragePreSignUrlResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nitric.proto.storage.v2.StorageListBlobsRequest = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nitric.proto.storage.v2.StorageListBlobsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.nitric.proto.storage.v2.StorageListBlobsRequest.displayName = 'proto.nitric.proto.storage.v2.StorageListBlobsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nitric.proto.storage.v2.Blob = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nitric.proto.storage.v2.Blob, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.nitric.proto.storage.v2.Blob.displayName = 'proto.nitric.proto.storage.v2.Blob';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nitric.proto.storage.v2.StorageListBlobsResponse = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, proto.nitric.proto.storage.v2.StorageListBlobsResponse.repeatedFields_, null);
};
goog.inherits(proto.nitric.proto.storage.v2.StorageListBlobsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.nitric.proto.storage.v2.StorageListBlobsResponse.displayName = 'proto.nitric.proto.storage.v2.StorageListBlobsResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nitric.proto.storage.v2.StorageExistsRequest = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nitric.proto.storage.v2.StorageExistsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.nitric.proto.storage.v2.StorageExistsRequest.displayName = 'proto.nitric.proto.storage.v2.StorageExistsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nitric.proto.storage.v2.StorageExistsResponse = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nitric.proto.storage.v2.StorageExistsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.nitric.proto.storage.v2.StorageExistsResponse.displayName = 'proto.nitric.proto.storage.v2.StorageExistsResponse';
}
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.nitric.proto.storage.v2.StorageWriteRequest.prototype.toObject = function (opt_includeInstance) {
        return proto.nitric.proto.storage.v2.StorageWriteRequest.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.nitric.proto.storage.v2.StorageWriteRequest} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.nitric.proto.storage.v2.StorageWriteRequest.toObject = function (includeInstance, msg) {
        var f, obj = {
            bucketName: jspb.Message.getFieldWithDefault(msg, 1, ""),
            key: jspb.Message.getFieldWithDefault(msg, 2, ""),
            body: msg.getBody_asB64()
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nitric.proto.storage.v2.StorageWriteRequest}
 */
proto.nitric.proto.storage.v2.StorageWriteRequest.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.nitric.proto.storage.v2.StorageWriteRequest;
    return proto.nitric.proto.storage.v2.StorageWriteRequest.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nitric.proto.storage.v2.StorageWriteRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nitric.proto.storage.v2.StorageWriteRequest}
 */
proto.nitric.proto.storage.v2.StorageWriteRequest.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {string} */ (reader.readString());
                msg.setBucketName(value);
                break;
            case 2:
                var value = /** @type {string} */ (reader.readString());
                msg.setKey(value);
                break;
            case 3:
                var value = /** @type {!Uint8Array} */ (reader.readBytes());
                msg.setBody(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nitric.proto.storage.v2.StorageWriteRequest.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.nitric.proto.storage.v2.StorageWriteRequest.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nitric.proto.storage.v2.StorageWriteRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.proto.storage.v2.StorageWriteRequest.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getBucketName();
    if (f.length > 0) {
        writer.writeString(1, f);
    }
    f = message.getKey();
    if (f.length > 0) {
        writer.writeString(2, f);
    }
    f = message.getBody_asU8();
    if (f.length > 0) {
        writer.writeBytes(3, f);
    }
};
/**
 * optional string bucket_name = 1;
 * @return {string}
 */
proto.nitric.proto.storage.v2.StorageWriteRequest.prototype.getBucketName = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};
/**
 * @param {string} value
 * @return {!proto.nitric.proto.storage.v2.StorageWriteRequest} returns this
 */
proto.nitric.proto.storage.v2.StorageWriteRequest.prototype.setBucketName = function (value) {
    return jspb.Message.setProto3StringField(this, 1, value);
};
/**
 * optional string key = 2;
 * @return {string}
 */
proto.nitric.proto.storage.v2.StorageWriteRequest.prototype.getKey = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};
/**
 * @param {string} value
 * @return {!proto.nitric.proto.storage.v2.StorageWriteRequest} returns this
 */
proto.nitric.proto.storage.v2.StorageWriteRequest.prototype.setKey = function (value) {
    return jspb.Message.setProto3StringField(this, 2, value);
};
/**
 * optional bytes body = 3;
 * @return {!(string|Uint8Array)}
 */
proto.nitric.proto.storage.v2.StorageWriteRequest.prototype.getBody = function () {
    return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};
/**
 * optional bytes body = 3;
 * This is a type-conversion wrapper around `getBody()`
 * @return {string}
 */
proto.nitric.proto.storage.v2.StorageWriteRequest.prototype.getBody_asB64 = function () {
    return /** @type {string} */ (jspb.Message.bytesAsB64(this.getBody()));
};
/**
 * optional bytes body = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBody()`
 * @return {!Uint8Array}
 */
proto.nitric.proto.storage.v2.StorageWriteRequest.prototype.getBody_asU8 = function () {
    return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getBody()));
};
/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.nitric.proto.storage.v2.StorageWriteRequest} returns this
 */
proto.nitric.proto.storage.v2.StorageWriteRequest.prototype.setBody = function (value) {
    return jspb.Message.setProto3BytesField(this, 3, value);
};
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.nitric.proto.storage.v2.StorageWriteResponse.prototype.toObject = function (opt_includeInstance) {
        return proto.nitric.proto.storage.v2.StorageWriteResponse.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.nitric.proto.storage.v2.StorageWriteResponse} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.nitric.proto.storage.v2.StorageWriteResponse.toObject = function (includeInstance, msg) {
        var f, obj = {};
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nitric.proto.storage.v2.StorageWriteResponse}
 */
proto.nitric.proto.storage.v2.StorageWriteResponse.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.nitric.proto.storage.v2.StorageWriteResponse;
    return proto.nitric.proto.storage.v2.StorageWriteResponse.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nitric.proto.storage.v2.StorageWriteResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nitric.proto.storage.v2.StorageWriteResponse}
 */
proto.nitric.proto.storage.v2.StorageWriteResponse.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nitric.proto.storage.v2.StorageWriteResponse.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.nitric.proto.storage.v2.StorageWriteResponse.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nitric.proto.storage.v2.StorageWriteResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.proto.storage.v2.StorageWriteResponse.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
};
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.nitric.proto.storage.v2.StorageReadRequest.prototype.toObject = function (opt_includeInstance) {
        return proto.nitric.proto.storage.v2.StorageReadRequest.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.nitric.proto.storage.v2.StorageReadRequest} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.nitric.proto.storage.v2.StorageReadRequest.toObject = function (includeInstance, msg) {
        var f, obj = {
            bucketName: jspb.Message.getFieldWithDefault(msg, 1, ""),
            key: jspb.Message.getFieldWithDefault(msg, 2, "")
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nitric.proto.storage.v2.StorageReadRequest}
 */
proto.nitric.proto.storage.v2.StorageReadRequest.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.nitric.proto.storage.v2.StorageReadRequest;
    return proto.nitric.proto.storage.v2.StorageReadRequest.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nitric.proto.storage.v2.StorageReadRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nitric.proto.storage.v2.StorageReadRequest}
 */
proto.nitric.proto.storage.v2.StorageReadRequest.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {string} */ (reader.readString());
                msg.setBucketName(value);
                break;
            case 2:
                var value = /** @type {string} */ (reader.readString());
                msg.setKey(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nitric.proto.storage.v2.StorageReadRequest.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.nitric.proto.storage.v2.StorageReadRequest.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nitric.proto.storage.v2.StorageReadRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.proto.storage.v2.StorageReadRequest.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getBucketName();
    if (f.length > 0) {
        writer.writeString(1, f);
    }
    f = message.getKey();
    if (f.length > 0) {
        writer.writeString(2, f);
    }
};
/**
 * optional string bucket_name = 1;
 * @return {string}
 */
proto.nitric.proto.storage.v2.StorageReadRequest.prototype.getBucketName = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};
/**
 * @param {string} value
 * @return {!proto.nitric.proto.storage.v2.StorageReadRequest} returns this
 */
proto.nitric.proto.storage.v2.StorageReadRequest.prototype.setBucketName = function (value) {
    return jspb.Message.setProto3StringField(this, 1, value);
};
/**
 * optional string key = 2;
 * @return {string}
 */
proto.nitric.proto.storage.v2.StorageReadRequest.prototype.getKey = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};
/**
 * @param {string} value
 * @return {!proto.nitric.proto.storage.v2.StorageReadRequest} returns this
 */
proto.nitric.proto.storage.v2.StorageReadRequest.prototype.setKey = function (value) {
    return jspb.Message.setProto3StringField(this, 2, value);
};
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.nitric.proto.storage.v2.StorageReadResponse.prototype.toObject = function (opt_includeInstance) {
        return proto.nitric.proto.storage.v2.StorageReadResponse.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.nitric.proto.storage.v2.StorageReadResponse} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.nitric.proto.storage.v2.StorageReadResponse.toObject = function (includeInstance, msg) {
        var f, obj = {
            body: msg.getBody_asB64()
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nitric.proto.storage.v2.StorageReadResponse}
 */
proto.nitric.proto.storage.v2.StorageReadResponse.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.nitric.proto.storage.v2.StorageReadResponse;
    return proto.nitric.proto.storage.v2.StorageReadResponse.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nitric.proto.storage.v2.StorageReadResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nitric.proto.storage.v2.StorageReadResponse}
 */
proto.nitric.proto.storage.v2.StorageReadResponse.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {!Uint8Array} */ (reader.readBytes());
                msg.setBody(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nitric.proto.storage.v2.StorageReadResponse.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.nitric.proto.storage.v2.StorageReadResponse.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nitric.proto.storage.v2.StorageReadResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.proto.storage.v2.StorageReadResponse.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getBody_asU8();
    if (f.length > 0) {
        writer.writeBytes(1, f);
    }
};
/**
 * optional bytes body = 1;
 * @return {!(string|Uint8Array)}
 */
proto.nitric.proto.storage.v2.StorageReadResponse.prototype.getBody = function () {
    return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};
/**
 * optional bytes body = 1;
 * This is a type-conversion wrapper around `getBody()`
 * @return {string}
 */
proto.nitric.proto.storage.v2.StorageReadResponse.prototype.getBody_asB64 = function () {
    return /** @type {string} */ (jspb.Message.bytesAsB64(this.getBody()));
};
/**
 * optional bytes body = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBody()`
 * @return {!Uint8Array}
 */
proto.nitric.proto.storage.v2.StorageReadResponse.prototype.getBody_asU8 = function () {
    return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getBody()));
};
/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.nitric.proto.storage.v2.StorageReadResponse} returns this
 */
proto.nitric.proto.storage.v2.StorageReadResponse.prototype.setBody = function (value) {
    return jspb.Message.setProto3BytesField(this, 1, value);
};
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.nitric.proto.storage.v2.StorageDeleteRequest.prototype.toObject = function (opt_includeInstance) {
        return proto.nitric.proto.storage.v2.StorageDeleteRequest.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.nitric.proto.storage.v2.StorageDeleteRequest} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.nitric.proto.storage.v2.StorageDeleteRequest.toObject = function (includeInstance, msg) {
        var f, obj = {
            bucketName: jspb.Message.getFieldWithDefault(msg, 1, ""),
            key: jspb.Message.getFieldWithDefault(msg, 2, "")
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nitric.proto.storage.v2.StorageDeleteRequest}
 */
proto.nitric.proto.storage.v2.StorageDeleteRequest.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.nitric.proto.storage.v2.StorageDeleteRequest;
    return proto.nitric.proto.storage.v2.StorageDeleteRequest.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nitric.proto.storage.v2.StorageDeleteRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nitric.proto.storage.v2.StorageDeleteRequest}
 */
proto.nitric.proto.storage.v2.StorageDeleteRequest.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {string} */ (reader.readString());
                msg.setBucketName(value);
                break;
            case 2:
                var value = /** @type {string} */ (reader.readString());
                msg.setKey(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nitric.proto.storage.v2.StorageDeleteRequest.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.nitric.proto.storage.v2.StorageDeleteRequest.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nitric.proto.storage.v2.StorageDeleteRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.proto.storage.v2.StorageDeleteRequest.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getBucketName();
    if (f.length > 0) {
        writer.writeString(1, f);
    }
    f = message.getKey();
    if (f.length > 0) {
        writer.writeString(2, f);
    }
};
/**
 * optional string bucket_name = 1;
 * @return {string}
 */
proto.nitric.proto.storage.v2.StorageDeleteRequest.prototype.getBucketName = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};
/**
 * @param {string} value
 * @return {!proto.nitric.proto.storage.v2.StorageDeleteRequest} returns this
 */
proto.nitric.proto.storage.v2.StorageDeleteRequest.prototype.setBucketName = function (value) {
    return jspb.Message.setProto3StringField(this, 1, value);
};
/**
 * optional string key = 2;
 * @return {string}
 */
proto.nitric.proto.storage.v2.StorageDeleteRequest.prototype.getKey = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};
/**
 * @param {string} value
 * @return {!proto.nitric.proto.storage.v2.StorageDeleteRequest} returns this
 */
proto.nitric.proto.storage.v2.StorageDeleteRequest.prototype.setKey = function (value) {
    return jspb.Message.setProto3StringField(this, 2, value);
};
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.nitric.proto.storage.v2.StorageDeleteResponse.prototype.toObject = function (opt_includeInstance) {
        return proto.nitric.proto.storage.v2.StorageDeleteResponse.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.nitric.proto.storage.v2.StorageDeleteResponse} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.nitric.proto.storage.v2.StorageDeleteResponse.toObject = function (includeInstance, msg) {
        var f, obj = {};
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nitric.proto.storage.v2.StorageDeleteResponse}
 */
proto.nitric.proto.storage.v2.StorageDeleteResponse.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.nitric.proto.storage.v2.StorageDeleteResponse;
    return proto.nitric.proto.storage.v2.StorageDeleteResponse.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nitric.proto.storage.v2.StorageDeleteResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nitric.proto.storage.v2.StorageDeleteResponse}
 */
proto.nitric.proto.storage.v2.StorageDeleteResponse.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nitric.proto.storage.v2.StorageDeleteResponse.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.nitric.proto.storage.v2.StorageDeleteResponse.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nitric.proto.storage.v2.StorageDeleteResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.proto.storage.v2.StorageDeleteResponse.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
};
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.nitric.proto.storage.v2.StoragePreSignUrlRequest.prototype.toObject = function (opt_includeInstance) {
        return proto.nitric.proto.storage.v2.StoragePreSignUrlRequest.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.nitric.proto.storage.v2.StoragePreSignUrlRequest} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.nitric.proto.storage.v2.StoragePreSignUrlRequest.toObject = function (includeInstance, msg) {
        var f, obj = {
            bucketName: jspb.Message.getFieldWithDefault(msg, 1, ""),
            key: jspb.Message.getFieldWithDefault(msg, 2, ""),
            operation: jspb.Message.getFieldWithDefault(msg, 3, 0),
            expiry: (f = msg.getExpiry()) && google_protobuf_duration_pb.Duration.toObject(includeInstance, f)
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nitric.proto.storage.v2.StoragePreSignUrlRequest}
 */
proto.nitric.proto.storage.v2.StoragePreSignUrlRequest.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.nitric.proto.storage.v2.StoragePreSignUrlRequest;
    return proto.nitric.proto.storage.v2.StoragePreSignUrlRequest.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nitric.proto.storage.v2.StoragePreSignUrlRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nitric.proto.storage.v2.StoragePreSignUrlRequest}
 */
proto.nitric.proto.storage.v2.StoragePreSignUrlRequest.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {string} */ (reader.readString());
                msg.setBucketName(value);
                break;
            case 2:
                var value = /** @type {string} */ (reader.readString());
                msg.setKey(value);
                break;
            case 3:
                var value = /** @type {!proto.nitric.proto.storage.v2.StoragePreSignUrlRequest.Operation} */ (reader.readEnum());
                msg.setOperation(value);
                break;
            case 4:
                var value = new google_protobuf_duration_pb.Duration;
                reader.readMessage(value, google_protobuf_duration_pb.Duration.deserializeBinaryFromReader);
                msg.setExpiry(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nitric.proto.storage.v2.StoragePreSignUrlRequest.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.nitric.proto.storage.v2.StoragePreSignUrlRequest.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nitric.proto.storage.v2.StoragePreSignUrlRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.proto.storage.v2.StoragePreSignUrlRequest.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getBucketName();
    if (f.length > 0) {
        writer.writeString(1, f);
    }
    f = message.getKey();
    if (f.length > 0) {
        writer.writeString(2, f);
    }
    f = message.getOperation();
    if (f !== 0.0) {
        writer.writeEnum(3, f);
    }
    f = message.getExpiry();
    if (f != null) {
        writer.writeMessage(4, f, google_protobuf_duration_pb.Duration.serializeBinaryToWriter);
    }
};
/**
 * @enum {number}
 */
proto.nitric.proto.storage.v2.StoragePreSignUrlRequest.Operation = {
    READ: 0,
    WRITE: 1
};
/**
 * optional string bucket_name = 1;
 * @return {string}
 */
proto.nitric.proto.storage.v2.StoragePreSignUrlRequest.prototype.getBucketName = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};
/**
 * @param {string} value
 * @return {!proto.nitric.proto.storage.v2.StoragePreSignUrlRequest} returns this
 */
proto.nitric.proto.storage.v2.StoragePreSignUrlRequest.prototype.setBucketName = function (value) {
    return jspb.Message.setProto3StringField(this, 1, value);
};
/**
 * optional string key = 2;
 * @return {string}
 */
proto.nitric.proto.storage.v2.StoragePreSignUrlRequest.prototype.getKey = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};
/**
 * @param {string} value
 * @return {!proto.nitric.proto.storage.v2.StoragePreSignUrlRequest} returns this
 */
proto.nitric.proto.storage.v2.StoragePreSignUrlRequest.prototype.setKey = function (value) {
    return jspb.Message.setProto3StringField(this, 2, value);
};
/**
 * optional Operation operation = 3;
 * @return {!proto.nitric.proto.storage.v2.StoragePreSignUrlRequest.Operation}
 */
proto.nitric.proto.storage.v2.StoragePreSignUrlRequest.prototype.getOperation = function () {
    return /** @type {!proto.nitric.proto.storage.v2.StoragePreSignUrlRequest.Operation} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};
/**
 * @param {!proto.nitric.proto.storage.v2.StoragePreSignUrlRequest.Operation} value
 * @return {!proto.nitric.proto.storage.v2.StoragePreSignUrlRequest} returns this
 */
proto.nitric.proto.storage.v2.StoragePreSignUrlRequest.prototype.setOperation = function (value) {
    return jspb.Message.setProto3EnumField(this, 3, value);
};
/**
 * optional google.protobuf.Duration expiry = 4;
 * @return {?proto.google.protobuf.Duration}
 */
proto.nitric.proto.storage.v2.StoragePreSignUrlRequest.prototype.getExpiry = function () {
    return /** @type{?proto.google.protobuf.Duration} */ (jspb.Message.getWrapperField(this, google_protobuf_duration_pb.Duration, 4));
};
/**
 * @param {?proto.google.protobuf.Duration|undefined} value
 * @return {!proto.nitric.proto.storage.v2.StoragePreSignUrlRequest} returns this
*/
proto.nitric.proto.storage.v2.StoragePreSignUrlRequest.prototype.setExpiry = function (value) {
    return jspb.Message.setWrapperField(this, 4, value);
};
/**
 * Clears the message field making it undefined.
 * @return {!proto.nitric.proto.storage.v2.StoragePreSignUrlRequest} returns this
 */
proto.nitric.proto.storage.v2.StoragePreSignUrlRequest.prototype.clearExpiry = function () {
    return this.setExpiry(undefined);
};
/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nitric.proto.storage.v2.StoragePreSignUrlRequest.prototype.hasExpiry = function () {
    return jspb.Message.getField(this, 4) != null;
};
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.nitric.proto.storage.v2.StoragePreSignUrlResponse.prototype.toObject = function (opt_includeInstance) {
        return proto.nitric.proto.storage.v2.StoragePreSignUrlResponse.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.nitric.proto.storage.v2.StoragePreSignUrlResponse} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.nitric.proto.storage.v2.StoragePreSignUrlResponse.toObject = function (includeInstance, msg) {
        var f, obj = {
            url: jspb.Message.getFieldWithDefault(msg, 1, "")
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nitric.proto.storage.v2.StoragePreSignUrlResponse}
 */
proto.nitric.proto.storage.v2.StoragePreSignUrlResponse.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.nitric.proto.storage.v2.StoragePreSignUrlResponse;
    return proto.nitric.proto.storage.v2.StoragePreSignUrlResponse.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nitric.proto.storage.v2.StoragePreSignUrlResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nitric.proto.storage.v2.StoragePreSignUrlResponse}
 */
proto.nitric.proto.storage.v2.StoragePreSignUrlResponse.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {string} */ (reader.readString());
                msg.setUrl(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nitric.proto.storage.v2.StoragePreSignUrlResponse.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.nitric.proto.storage.v2.StoragePreSignUrlResponse.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nitric.proto.storage.v2.StoragePreSignUrlResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.proto.storage.v2.StoragePreSignUrlResponse.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getUrl();
    if (f.length > 0) {
        writer.writeString(1, f);
    }
};
/**
 * optional string url = 1;
 * @return {string}
 */
proto.nitric.proto.storage.v2.StoragePreSignUrlResponse.prototype.getUrl = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};
/**
 * @param {string} value
 * @return {!proto.nitric.proto.storage.v2.StoragePreSignUrlResponse} returns this
 */
proto.nitric.proto.storage.v2.StoragePreSignUrlResponse.prototype.setUrl = function (value) {
    return jspb.Message.setProto3StringField(this, 1, value);
};
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.nitric.proto.storage.v2.StorageListBlobsRequest.prototype.toObject = function (opt_includeInstance) {
        return proto.nitric.proto.storage.v2.StorageListBlobsRequest.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.nitric.proto.storage.v2.StorageListBlobsRequest} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.nitric.proto.storage.v2.StorageListBlobsRequest.toObject = function (includeInstance, msg) {
        var f, obj = {
            bucketName: jspb.Message.getFieldWithDefault(msg, 1, ""),
            prefix: jspb.Message.getFieldWithDefault(msg, 2, "")
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nitric.proto.storage.v2.StorageListBlobsRequest}
 */
proto.nitric.proto.storage.v2.StorageListBlobsRequest.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.nitric.proto.storage.v2.StorageListBlobsRequest;
    return proto.nitric.proto.storage.v2.StorageListBlobsRequest.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nitric.proto.storage.v2.StorageListBlobsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nitric.proto.storage.v2.StorageListBlobsRequest}
 */
proto.nitric.proto.storage.v2.StorageListBlobsRequest.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {string} */ (reader.readString());
                msg.setBucketName(value);
                break;
            case 2:
                var value = /** @type {string} */ (reader.readString());
                msg.setPrefix(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nitric.proto.storage.v2.StorageListBlobsRequest.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.nitric.proto.storage.v2.StorageListBlobsRequest.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nitric.proto.storage.v2.StorageListBlobsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.proto.storage.v2.StorageListBlobsRequest.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getBucketName();
    if (f.length > 0) {
        writer.writeString(1, f);
    }
    f = message.getPrefix();
    if (f.length > 0) {
        writer.writeString(2, f);
    }
};
/**
 * optional string bucket_name = 1;
 * @return {string}
 */
proto.nitric.proto.storage.v2.StorageListBlobsRequest.prototype.getBucketName = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};
/**
 * @param {string} value
 * @return {!proto.nitric.proto.storage.v2.StorageListBlobsRequest} returns this
 */
proto.nitric.proto.storage.v2.StorageListBlobsRequest.prototype.setBucketName = function (value) {
    return jspb.Message.setProto3StringField(this, 1, value);
};
/**
 * optional string prefix = 2;
 * @return {string}
 */
proto.nitric.proto.storage.v2.StorageListBlobsRequest.prototype.getPrefix = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};
/**
 * @param {string} value
 * @return {!proto.nitric.proto.storage.v2.StorageListBlobsRequest} returns this
 */
proto.nitric.proto.storage.v2.StorageListBlobsRequest.prototype.setPrefix = function (value) {
    return jspb.Message.setProto3StringField(this, 2, value);
};
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.nitric.proto.storage.v2.Blob.prototype.toObject = function (opt_includeInstance) {
        return proto.nitric.proto.storage.v2.Blob.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.nitric.proto.storage.v2.Blob} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.nitric.proto.storage.v2.Blob.toObject = function (includeInstance, msg) {
        var f, obj = {
            key: jspb.Message.getFieldWithDefault(msg, 1, "")
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nitric.proto.storage.v2.Blob}
 */
proto.nitric.proto.storage.v2.Blob.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.nitric.proto.storage.v2.Blob;
    return proto.nitric.proto.storage.v2.Blob.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nitric.proto.storage.v2.Blob} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nitric.proto.storage.v2.Blob}
 */
proto.nitric.proto.storage.v2.Blob.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {string} */ (reader.readString());
                msg.setKey(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nitric.proto.storage.v2.Blob.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.nitric.proto.storage.v2.Blob.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nitric.proto.storage.v2.Blob} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.proto.storage.v2.Blob.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getKey();
    if (f.length > 0) {
        writer.writeString(1, f);
    }
};
/**
 * optional string key = 1;
 * @return {string}
 */
proto.nitric.proto.storage.v2.Blob.prototype.getKey = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};
/**
 * @param {string} value
 * @return {!proto.nitric.proto.storage.v2.Blob} returns this
 */
proto.nitric.proto.storage.v2.Blob.prototype.setKey = function (value) {
    return jspb.Message.setProto3StringField(this, 1, value);
};
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.nitric.proto.storage.v2.StorageListBlobsResponse.repeatedFields_ = [1];
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.nitric.proto.storage.v2.StorageListBlobsResponse.prototype.toObject = function (opt_includeInstance) {
        return proto.nitric.proto.storage.v2.StorageListBlobsResponse.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.nitric.proto.storage.v2.StorageListBlobsResponse} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.nitric.proto.storage.v2.StorageListBlobsResponse.toObject = function (includeInstance, msg) {
        var f, obj = {
            blobsList: jspb.Message.toObjectList(msg.getBlobsList(), proto.nitric.proto.storage.v2.Blob.toObject, includeInstance)
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nitric.proto.storage.v2.StorageListBlobsResponse}
 */
proto.nitric.proto.storage.v2.StorageListBlobsResponse.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.nitric.proto.storage.v2.StorageListBlobsResponse;
    return proto.nitric.proto.storage.v2.StorageListBlobsResponse.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nitric.proto.storage.v2.StorageListBlobsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nitric.proto.storage.v2.StorageListBlobsResponse}
 */
proto.nitric.proto.storage.v2.StorageListBlobsResponse.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = new proto.nitric.proto.storage.v2.Blob;
                reader.readMessage(value, proto.nitric.proto.storage.v2.Blob.deserializeBinaryFromReader);
                msg.addBlobs(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nitric.proto.storage.v2.StorageListBlobsResponse.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.nitric.proto.storage.v2.StorageListBlobsResponse.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nitric.proto.storage.v2.StorageListBlobsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.proto.storage.v2.StorageListBlobsResponse.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getBlobsList();
    if (f.length > 0) {
        writer.writeRepeatedMessage(1, f, proto.nitric.proto.storage.v2.Blob.serializeBinaryToWriter);
    }
};
/**
 * repeated Blob blobs = 1;
 * @return {!Array<!proto.nitric.proto.storage.v2.Blob>}
 */
proto.nitric.proto.storage.v2.StorageListBlobsResponse.prototype.getBlobsList = function () {
    return /** @type{!Array<!proto.nitric.proto.storage.v2.Blob>} */ (jspb.Message.getRepeatedWrapperField(this, proto.nitric.proto.storage.v2.Blob, 1));
};
/**
 * @param {!Array<!proto.nitric.proto.storage.v2.Blob>} value
 * @return {!proto.nitric.proto.storage.v2.StorageListBlobsResponse} returns this
*/
proto.nitric.proto.storage.v2.StorageListBlobsResponse.prototype.setBlobsList = function (value) {
    return jspb.Message.setRepeatedWrapperField(this, 1, value);
};
/**
 * @param {!proto.nitric.proto.storage.v2.Blob=} opt_value
 * @param {number=} opt_index
 * @return {!proto.nitric.proto.storage.v2.Blob}
 */
proto.nitric.proto.storage.v2.StorageListBlobsResponse.prototype.addBlobs = function (opt_value, opt_index) {
    return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.nitric.proto.storage.v2.Blob, opt_index);
};
/**
 * Clears the list making it empty but non-null.
 * @return {!proto.nitric.proto.storage.v2.StorageListBlobsResponse} returns this
 */
proto.nitric.proto.storage.v2.StorageListBlobsResponse.prototype.clearBlobsList = function () {
    return this.setBlobsList([]);
};
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.nitric.proto.storage.v2.StorageExistsRequest.prototype.toObject = function (opt_includeInstance) {
        return proto.nitric.proto.storage.v2.StorageExistsRequest.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.nitric.proto.storage.v2.StorageExistsRequest} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.nitric.proto.storage.v2.StorageExistsRequest.toObject = function (includeInstance, msg) {
        var f, obj = {
            bucketName: jspb.Message.getFieldWithDefault(msg, 1, ""),
            key: jspb.Message.getFieldWithDefault(msg, 2, "")
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nitric.proto.storage.v2.StorageExistsRequest}
 */
proto.nitric.proto.storage.v2.StorageExistsRequest.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.nitric.proto.storage.v2.StorageExistsRequest;
    return proto.nitric.proto.storage.v2.StorageExistsRequest.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nitric.proto.storage.v2.StorageExistsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nitric.proto.storage.v2.StorageExistsRequest}
 */
proto.nitric.proto.storage.v2.StorageExistsRequest.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {string} */ (reader.readString());
                msg.setBucketName(value);
                break;
            case 2:
                var value = /** @type {string} */ (reader.readString());
                msg.setKey(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nitric.proto.storage.v2.StorageExistsRequest.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.nitric.proto.storage.v2.StorageExistsRequest.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nitric.proto.storage.v2.StorageExistsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.proto.storage.v2.StorageExistsRequest.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getBucketName();
    if (f.length > 0) {
        writer.writeString(1, f);
    }
    f = message.getKey();
    if (f.length > 0) {
        writer.writeString(2, f);
    }
};
/**
 * optional string bucket_name = 1;
 * @return {string}
 */
proto.nitric.proto.storage.v2.StorageExistsRequest.prototype.getBucketName = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};
/**
 * @param {string} value
 * @return {!proto.nitric.proto.storage.v2.StorageExistsRequest} returns this
 */
proto.nitric.proto.storage.v2.StorageExistsRequest.prototype.setBucketName = function (value) {
    return jspb.Message.setProto3StringField(this, 1, value);
};
/**
 * optional string key = 2;
 * @return {string}
 */
proto.nitric.proto.storage.v2.StorageExistsRequest.prototype.getKey = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};
/**
 * @param {string} value
 * @return {!proto.nitric.proto.storage.v2.StorageExistsRequest} returns this
 */
proto.nitric.proto.storage.v2.StorageExistsRequest.prototype.setKey = function (value) {
    return jspb.Message.setProto3StringField(this, 2, value);
};
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.nitric.proto.storage.v2.StorageExistsResponse.prototype.toObject = function (opt_includeInstance) {
        return proto.nitric.proto.storage.v2.StorageExistsResponse.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.nitric.proto.storage.v2.StorageExistsResponse} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.nitric.proto.storage.v2.StorageExistsResponse.toObject = function (includeInstance, msg) {
        var f, obj = {
            exists: jspb.Message.getBooleanFieldWithDefault(msg, 1, false)
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nitric.proto.storage.v2.StorageExistsResponse}
 */
proto.nitric.proto.storage.v2.StorageExistsResponse.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.nitric.proto.storage.v2.StorageExistsResponse;
    return proto.nitric.proto.storage.v2.StorageExistsResponse.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nitric.proto.storage.v2.StorageExistsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nitric.proto.storage.v2.StorageExistsResponse}
 */
proto.nitric.proto.storage.v2.StorageExistsResponse.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {boolean} */ (reader.readBool());
                msg.setExists(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nitric.proto.storage.v2.StorageExistsResponse.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.nitric.proto.storage.v2.StorageExistsResponse.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nitric.proto.storage.v2.StorageExistsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.proto.storage.v2.StorageExistsResponse.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getExists();
    if (f) {
        writer.writeBool(1, f);
    }
};
/**
 * optional bool exists = 1;
 * @return {boolean}
 */
proto.nitric.proto.storage.v2.StorageExistsResponse.prototype.getExists = function () {
    return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};
/**
 * @param {boolean} value
 * @return {!proto.nitric.proto.storage.v2.StorageExistsResponse} returns this
 */
proto.nitric.proto.storage.v2.StorageExistsResponse.prototype.setExists = function (value) {
    return jspb.Message.setProto3BooleanField(this, 1, value);
};
goog.object.extend(exports, proto.nitric.proto.storage.v2);
