package sdk

import (
	"bytes"
	"fmt"
	"go/format"
	"path/filepath"
	"text/template"

	"github.com/nitrictech/nitric/cli/pkg/schema"
	"github.com/spf13/afero"
)

type SDKTemplateData struct {
	Package    string
	ImportPath string
	Buckets    []BucketTemplateData
}

type BucketTemplateData struct {
	Name string
	ID   string
}

func AppSpecToTemplateData(appSpec schema.Application) SDKTemplateData {
	buckets := []BucketTemplateData{}
	for name, resource := range appSpec.ResourceIntents {

		if resource.Type != "bucket" {
			continue
		}

		buckets = append(buckets, BucketTemplateData{
			Name: name,
			ID:   name,
		})
	}

	return SDKTemplateData{
		// TODO: use something better
		Package: appSpec.Name,
		// ImportPath: ,
		Buckets: buckets,
	}
}

// GenerateGoSDK generates Go SDK
func GenerateGoSDK(fs afero.Fs, appSpec schema.Application, outPath string) error {
	tmpl := template.Must(template.New("client").Parse(clientTemplate))
	data := AppSpecToTemplateData(appSpec)

	var buf bytes.Buffer
	err := tmpl.Execute(&buf, data)
	if err != nil {
		return fmt.Errorf("failed to execute template: %w", err)
	}

	formatted, err := format.Source(buf.Bytes())
	if err != nil {
		return fmt.Errorf("failed to format generated code: %w", err)
	}

	err = fs.MkdirAll(outPath, 0755)
	if err != nil {
		return fmt.Errorf("failed to create output directory: %w", err)
	}

	filePath := filepath.Join(outPath, "client.go")
	err = afero.WriteFile(fs, filePath, formatted, 0644)
	if err != nil {
		return fmt.Errorf("failed to write generated file: %w", err)
	}

	fmt.Printf("Go SDK generated at %s\n", filePath)

	return nil
}

const clientTemplate = `// Code generated by Nitric SDK generator. DO NOT EDIT.

package {{.Package}}

import (
	"context"
	"fmt"
	"time"

	"github.com/nitrictech/nitric/proto/storage/v2"
	"google.golang.org/grpc"
	"google.golang.org/grpc/credentials/insecure"
	"google.golang.org/protobuf/types/known/durationpb"
)

{{range .Buckets}}
// {{.Name}} provides methods for bucket "{{.Name}}"
type {{.Name}} struct {
	storageClient storagepb.StorageClient
}

// New{{.Name}} creates a new client for bucket "{{.ID}}"
func New{{.Name}}(storageClient storagepb.StorageClient) *{{.Name}} {
	return &{{.Name}}{
		storageClient: storageClient,
	}
}

// Read a file from the {{.Name}} bucket
func (c *{{.Name}}) Read(file string) ([]byte, error) {
	ctx := context.Background()
	
	req := &storagepb.StorageReadRequest{
		BucketName: "{{.Name}}",
		Key:   file,
	}

	res, err := c.storageClient.Read(ctx, req)
	if err != nil {
		return nil, fmt.Errorf("failed to read file from bucket: %w", err)
	}

	return res.Body, nil
}

// Write a file to the {{.Name}} bucket
func (c *{{.Name}}) Write(file string, data []byte) error {
	ctx := context.Background()

	req := &storagepb.StorageWriteRequest{
		BucketName: "{{.Name}}",
		Key:        file,
		Body:       data,
	}

	_, err := c.storageClient.Write(ctx, req)
	if err != nil {
		return fmt.Errorf("failed to write file to bucket: %w", err)
	}

	return nil
}

// Delete a file from the {{.Name}} bucket
func (c *{{.Name}}) Delete(file string) error {
	ctx := context.Background()

	req := &storagepb.StorageDeleteRequest{
		BucketName: "{{.Name}}",
		Key:        file,
	}

	_, err := c.storageClient.Delete(ctx, req)
	if err != nil {
		return fmt.Errorf("failed to delete file from bucket: %w", err)
	}

	return nil
}

func (c *{{.Name}}) List(prefix string) ([]string, error) {
	ctx := context.Background()

	req := &storagepb.StorageListBlobsRequest{
		BucketName: "{{.Name}}",
		Prefix:     prefix,
	}

	res, err := c.storageClient.ListBlobs(ctx, req)
	if err != nil {
		return nil, fmt.Errorf("failed to list files in bucket: %w", err)
	}

	keys := make([]string, len(res.Blobs))
	for i, blob := range res.Blobs {
		keys[i] = blob.Key
	}

	return keys, nil
}

func (c *{{.Name}}) Exists(file string) (bool, error) {
	ctx := context.Background()

	req := &storagepb.StorageExistsRequest{
		BucketName: "{{.Name}}",
		Key:        file,
	}

	res, err := c.storageClient.Exists(ctx, req)
	if err != nil {
		return false, fmt.Errorf("failed to check if file exists in bucket: %w", err)
	}

	return res.Exists, nil
}

type Mode int

const (
	ModeRead Mode = iota
	ModeWrite
)

type presignUrlOptions struct {
	mode   Mode
	expiry time.Duration
}

type PresignUrlOption func(opts *presignUrlOptions)

func WithPresignUrlExpiry(expiry time.Duration) PresignUrlOption {
	return func(opts *presignUrlOptions) {
		opts.expiry = expiry
	}
}

func getPresignUrlOpts(mode Mode, opts ...PresignUrlOption) *presignUrlOptions {
	defaultOpts := &presignUrlOptions{
		mode:   mode,
		expiry: time.Minute * 5,
	}

	for _, opt := range opts {
		opt(defaultOpts)
	}

	return defaultOpts
}

func (c *{{.Name}}) presignUrl(file string, opts *presignUrlOptions) (string, error) {
	ctx := context.Background()

	op := storagepb.StoragePreSignUrlRequest_READ

	if opts.mode == ModeWrite {
		op = storagepb.StoragePreSignUrlRequest_WRITE
	}

	req := &storagepb.StoragePreSignUrlRequest{
		BucketName: "{{.Name}}",
		Key:        file,
		Operation:  op,
		Expiry: durationpb.New(opts.expiry),
	}

	res, err := c.storageClient.PreSignUrl(ctx, req)
	if err != nil {
		return "", fmt.Errorf("failed to get presigned URL for file: %w", err)
	}

	return res.Url, nil
}

func (c *{{.Name}}) GetDownloadURL(file string, opts ...PresignUrlOption) (string, error) {
	optsWithDefaults := getPresignUrlOpts(ModeWrite, opts...)

	return c.presignUrl(file, optsWithDefaults)
}

func (c *{{.Name}}) GetUploadURL(file string, opts ...PresignUrlOption) (string, error) {
	optsWithDefaults := getPresignUrlOpts(ModeWrite, opts...)

	return c.presignUrl(file, optsWithDefaults)
}

{{end}}

// Nitric provides access to application resources
type Nitric struct {
	{{range .Buckets}}{{.Name}} *{{.Name}}
	{{end}}
}

// NewNitric creates a new set of all bucket clients
func NewNitric() (*Nitric, error) {
	cc, err := grpc.NewClient("localhost:50051", grpc.WithTransportCredentials(insecure.NewCredentials()))
	if err != nil {
		return nil, fmt.Errorf("failed to connect to nitric runtime server: %w", err)
	}
	storageClient := storagepb.NewStorageClient(cc)

	return &Nitric{
		{{range .Buckets}}{{.Name}}: New{{.Name}}(storageClient),
		{{end}}
	}, nil
}
`
